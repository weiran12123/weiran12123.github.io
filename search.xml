<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/weiran12123.github.io/2024/06/27/hello-world/"/>
      <url>/weiran12123.github.io/2024/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/weiran12123.github.io/2023/10/16/Git/"/>
      <url>/weiran12123.github.io/2023/10/16/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>Github入门文档：<a href="https://docs.github.com/zh/get-started">GitHub 入门文档 - GitHub 文档</a></p><h1 id="Github库命名规范"><a href="#Github库命名规范" class="headerlink" title="Github库命名规范"></a>Github库命名规范</h1><p><a href="https://blog.csdn.net/qq_42707446/article/details/83013845">Github仓库命名规范-CSDN博客</a></p><h1 id="Git版本管理工具"><a href="#Git版本管理工具" class="headerlink" title="Git版本管理工具"></a>Git版本管理工具</h1><h2 id="git教程"><a href="#git教程" class="headerlink" title="git教程"></a>git教程</h2><p>git的安装与配置:<a href="https://zhuanlan.zhihu.com/p/597447255#">https://zhuanlan.zhihu.com/p/597447255#</a></p><p>Git备份:<a href="https://zhuanlan.zhihu.com/p/99313784">https://zhuanlan.zhihu.com/p/99313784</a></p><p>Git - 书籍:<a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></p><p>git 使用简易指南:<a href="https://www.bootcss.com/p/git-guide/">https://www.bootcss.com/p/git-guide/</a></p><h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><p>Git - 下载:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h3 id="Centos7安装git"><a href="#Centos7安装git" class="headerlink" title="Centos7安装git"></a>Centos7安装git</h3><p>CentOS7安装Git:<a href="https://blog.csdn.net/xwj1992930/article/details/96428998">https://blog.csdn.net/xwj1992930/article/details/96428998</a></p><h4 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>1.安装前要手动安装下依赖包（可使用rpm -qa | grep wget命令查看是否有安装包）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y wget</span><br><span class="line">sudo yum install -y gcc-c++</span><br><span class="line">sudo yum install -y zlib-devel perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><p>2.去官网下载最新版本的git源码包,或者将压缩包拷贝过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.0.tar.gz</span><br></pre></td></tr></table></figure><p>3.接下来就是解压，配置，安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf git-2.9.0.tar.gz</span><br><span class="line">cd git-2.9.0</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">./configure后面的–prefix=/usr/local，指定安装路径为usr/local</span><br></pre></td></tr></table></figure><p>4.查看git版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>git指令清单:<a href="https://training.github.com/">https://training.github.com/</a></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">git 配置</span><br><span class="line"></span><br><span class="line">git config --global user.name weiran12123</span><br><span class="line"></span><br><span class="line">git config --global user.email weiran12123@163.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询git配置：</span><br><span class="line"></span><br><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">生成.git文件,初始化</span><br><span class="line"></span><br><span class="line">git init </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">备份文件</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &quot;1.0版本&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看git备份日志</span><br><span class="line"></span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">恢复某个版本的文件</span><br><span class="line"></span><br><span class="line">git reset --hard 版本序列号 </span><br></pre></td></tr></table></figure><h2 id="git上传github"><a href="#git上传github" class="headerlink" title="git上传github"></a>git上传github</h2><p>上传文件到GitHub上的两种方法:<a href="https://blog.csdn.net/erhuobuer/article/details/89343380">https://blog.csdn.net/erhuobuer/article/details/89343380</a></p><p>以下用的:用Git与GitHub来管理项目-上传&#x2F;覆盖&#x2F;删除:<a href="https://blog.csdn.net/m0_46419510/article/details/110499832">https://blog.csdn.net/m0_46419510/article/details/110499832</a></p><p>创建关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 关联账号</span><br><span class="line">ssh-keygen -t rsa -C “你的邮箱”</span><br><span class="line"></span><br><span class="line">关联仓库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">git remote add origin 仓库ssh地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除仓库关联</span><br><span class="line">git remote rm origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更换仓库</span><br><span class="line">git remote set-url origin 仓库ssh地址</span><br></pre></td></tr></table></figure><p>添加上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &quot;把文件提交，这里是注释&quot;</span><br><span class="line"></span><br><span class="line">git tag -a 1.0.1 -m “1.0.1” //添加版本号</span><br><span class="line"></span><br><span class="line"> master分支</span><br><span class="line"> git branch -M master //选择master分支，可以改名上传其它分支</span><br><span class="line"> git push -u origin master</span><br><span class="line"> </span><br><span class="line"> main分支</span><br><span class="line"> git branch -M main //选择main分支，可以改名上传其它分支</span><br><span class="line"> git push -u origin main</span><br><span class="line"> </span><br><span class="line"> 其他分支</span><br><span class="line"> git branch -M &#x27;其他分支名字&#x27;</span><br><span class="line"> git push -u origin &#x27;其他分支名字&#x27;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 出现错误</span><br><span class="line">git pull --rebase origin master //本地文件没有远程仓库的全部文件，如readme.md</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>git删除分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># git删除远程分支</span><br><span class="line">git push origin --delete [分支名称]</span><br><span class="line">推送空分支到远程（删除远程分支另一种实现）git push origin :远程分支</span><br><span class="line"></span><br><span class="line"># 删除本地分支</span><br><span class="line"># 删除本地分支区别</span><br><span class="line">git branch -d 会在删除前检查merge状态（其与上游分支或者与head）。</span><br><span class="line">git branch -D 是git branch --delete --force的简写，它会直接删除。</span><br></pre></td></tr></table></figure><p>删除</p><p>Git：移除文件—-git rm命令的使用:<a href="https://blog.csdn.net/qq_42780289/article/details/98353792">https://blog.csdn.net/qq_42780289/article/details/98353792</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过以下指令删除指定文件</span><br><span class="line">git rm 文件.后缀</span><br><span class="line"></span><br><span class="line">通过以下指令可以删除指定文件夹</span><br><span class="line">git rm -r 文件夹</span><br><span class="line"></span><br><span class="line">最后，必要通过以下指令提交修改：</span><br><span class="line">git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看本地分支：</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">查看远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line">查看关联仓库地址：</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="git分支知识"><a href="#git分支知识" class="headerlink" title="git分支知识"></a>git分支知识</h2><p><a href="https://blog.csdn.net/weixin_44098452/article/details/115317258">(四) github分支的知识_github 分支_-Toupi.的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//查看分支列表</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">//创建新分支</span><br><span class="line">git branch 新分支的名字</span><br><span class="line"></span><br><span class="line">//切换分支</span><br><span class="line">git checkout 分支名字</span><br><span class="line"></span><br><span class="line">//分支的快速创建和切换</span><br><span class="line">git checkout -b 分支名字</span><br><span class="line"></span><br><span class="line">合并分支</span><br><span class="line">//假如在C分支</span><br><span class="line">//先切换到A分支</span><br><span class="line">git checkout A</span><br><span class="line">//此时在A分支，合并A，C分支</span><br><span class="line">git merge C</span><br><span class="line"></span><br><span class="line">//删除分支</span><br><span class="line">git branch -d xxx</span><br><span class="line"></span><br><span class="line"># 将本地分支推送到远程仓库</span><br><span class="line">// -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span><br><span class="line">git push -u 远程仓库的别名 本地分支名称: 远程分支名称</span><br><span class="line"></span><br><span class="line">//案例</span><br><span class="line">git push -u origin payment:pay</span><br><span class="line"></span><br><span class="line">//如果希望远程分支的名称和本地分支名称保持一直，可以对命令进行简化：</span><br><span class="line">git push -u origin payment</span><br><span class="line"></span><br><span class="line"># 查看远程仓库中所有的分支列表</span><br><span class="line">git remote show 远程仓库名称</span><br><span class="line"></span><br><span class="line"> 跟踪分支</span><br><span class="line">// 从远程仓库中，把对应的远程分支下载到本地仓库，名字保持一致</span><br><span class="line">git checkout 远程分支的名称</span><br><span class="line"></span><br><span class="line">//从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span><br><span class="line">git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span><br><span class="line"></span><br><span class="line">//案例  把远程仓库origin里面的pay分支下载并重命名为payment分支</span><br><span class="line">git checkout -b payment origin/pay</span><br><span class="line"></span><br><span class="line">#  拉取远程分支的最新的代码</span><br><span class="line">//从远程仓库，拉区当前分支的最新代码，保持当前分支的代码和远程分支的代码一致</span><br><span class="line">git pull </span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">git push 远程仓库名称 --delete 远程分支名称</span><br><span class="line">//案例</span><br><span class="line">git push origin--delete pay</span><br><span class="line"></span><br><span class="line">1）Git 中基本命令的使用</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit –m “提交消息”</span><br><span class="line">git status 和 git status -s</span><br><span class="line"></span><br><span class="line">2）Github 创建和维护远程仓库</span><br><span class="line">能够配置 Github 的 SSH 访问</span><br><span class="line">能够将本地仓库上传到 Github</span><br><span class="line"></span><br><span class="line">3）Git 分支的基本使用</span><br><span class="line">git checkout -b 新分支名称</span><br><span class="line">git push -u origin 新分支名称</span><br><span class="line">git checkout 分支名称</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><h2 id="下载三方项目"><a href="#下载三方项目" class="headerlink" title="下载三方项目"></a>下载三方项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &#x27;url&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pr</title>
      <link href="/weiran12123.github.io/2023/10/11/Pr/"/>
      <url>/weiran12123.github.io/2023/10/11/Pr/</url>
      
        <content type="html"><![CDATA[<h1 id="剪辑手法"><a href="#剪辑手法" class="headerlink" title="剪辑手法"></a>剪辑手法</h1><blockquote><ol><li><p>动作顺接顺着动作来进行</p></li><li><p>离切插入镜头，再切换主镜头</p></li><li><p>交叉剪辑两个场景来回切换</p></li><li><p>跳切时间流逝，镜头不变，画面变换</p></li><li><p>匹配剪切</p></li><li><p>淡入，淡出</p></li><li><p>叠化</p></li><li><p>跳跃剪辑</p></li><li><p>圆形划像</p></li><li><p>隐藏转场</p></li><li><p>声音滞后</p></li><li><p>声音先入未见其人先闻其声</p></li></ol></blockquote><br/><h2 id="蒙太奇"><a href="#蒙太奇" class="headerlink" title="蒙太奇"></a>蒙太奇</h2><blockquote><p>符合逻辑，不管结果</p><ol><li><p>因果蒙太奇</p></li><li><p>联想蒙太奇</p></li></ol></blockquote><br/><h2 id="文案"><a href="#文案" class="headerlink" title="文案"></a>文案</h2><br/><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p><br/><br/></p><h1 id="Pr快捷键"><a href="#Pr快捷键" class="headerlink" title="Pr快捷键"></a>Pr快捷键</h1><ul><li>素材导入：Ctrl+i</li><li>媒体导出：Ctrl+M</li><li>新建项目：Ctrl + Alt + N</li><li>新建序列:Ctrl + N</li><li>保存:Ctrl + S</li><li>另存为：Ctrl + Alt + S</li><li>播放暂停：空格</li><li>快退 停止 快进： J K L</li><li>慢速前后穿梭：Shift + L、Shift + J</li><li>查找 反向查找：F、Shft + R</li><li>入点 出点：i o</li><li>跳到出入点：Shift + i 、Shift + o</li><li>取消出入点: Ctrl + Shift + i 、Ctrl + Shift + q都取消 Ctrl + Shift + X</li><li>插入、覆盖：逗号、句号</li><li>提升、提取：分号、引号提升：删除出入点内容留下空的黑场提取：删除出入点内容 ，后面的内容衔接上去</li><li>导出帧：Ctrl + Shift + E</li><li>移动、剃刀：V、C</li><li>掐头、去尾：Q、W</li><li>链接开关:Ctrl+L</li><li>磁吸开关：S</li><li>选中当前时间线所在片段 : D</li><li>切断单轨：Ctrl + K</li><li>切断多轨：Ctrl + Shift + K</li><li>启用 禁用 ： Shift + E</li><li>音量线加减：[ ]、左加右减</li><li>打标记：M标记记录:双击M</li><li>跳到前面的标记：Shift + M</li><li>跳到下一个标记：Ctrl + Shift + M</li><li>取消当前标记：Ctrl + Alt + M</li><li>撤销、还原：Ctrl + Z、Ctrl + Shift + Z</li><li>复制：Alt 鼠标长按传统办法：Ctrl + V、Ctrl + C</li><li>复制粘贴属性：Ctrl + C、Ctrl + Alt + V (属性)</li><li>剪辑点跳跃：上下</li><li>帧数跳跃：左右左右+Shift 5帧5帧增加 </li><li>添加默认视频转场：Ctrl + D</li><li>添加默认音频转场：Ctrl + Shift + D</li><li>添加默认视频音频转场：Shift + D</li><li>窗口全屏：~</li><li>缩放时间轴：加减号</li><li>快速缩放：反斜杠</li><li>鼠标缩放时间轴：Alt 滑轮</li><li>前后穿梭时间轴：Shift 滑轮</li><li>多机位切换摄像机：1 2 3 4</li><li>互换片段位置：Ctrl + Shift + 鼠标左键拖拽</li><li>上下移动片段所在轨道：选中素材,按住Alt上下箭头变换素材所在轨道不建议用Z  </li><li>按住Shift拖拽素材快速对齐到某个位置：如标记点、出入点、剪辑点</li><li>工具栏快捷键</li><li>向前选择:A</li><li>向后选择:Shift + A</li><li>波纹编辑：B</li><li>滚动编辑：N</li><li>比例拉伸工具：R</li><li>内滑、外滑：U、Y</li><li>文字工具:T</li></ul><h1 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h1><h3 id="彩条"><a href="#彩条" class="headerlink" title="彩条"></a>彩条</h3><p><img src="/weiran12123.github.io/./pic/Pr/%E5%BD%A9%E6%9D%A1.png" alt="彩条"></p><br /><h3 id="黑场"><a href="#黑场" class="headerlink" title="黑场"></a>黑场</h3><p><img src="/weiran12123.github.io/./pic/Pr/%E9%BB%91%E5%9C%BA%E6%95%88%E6%9E%9C.png" alt="黑场效果"></p><br /><h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><p><img src="/weiran12123.github.io/./pic/Pr/%E5%80%92%E8%AE%A1%E6%97%B6.png" alt="倒计时"></p><br /><h3 id="颜色遮罩"><a href="#颜色遮罩" class="headerlink" title="颜色遮罩"></a>颜色遮罩</h3><blockquote><p>可自定义颜色</p></blockquote><p><img src="/weiran12123.github.io/./pic/Pr/%E9%A2%9C%E8%89%B2%E9%81%AE%E7%BD%A9.png" alt="颜色遮罩"></p><br/><br/><h1 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h1><h2 id="效果控件"><a href="#效果控件" class="headerlink" title="效果控件"></a>效果控件</h2><p><img src="/weiran12123.github.io/./pic/Pr/%E6%95%88%E6%9E%9C%E6%8E%A7%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="效果控件位置"></p><p><img src="/weiran12123.github.io/./pic/Pr/%E9%92%A2%E7%AC%94%E5%85%B3%E9%94%AE%E5%B8%A7.png" alt="image-20230721111655773"></p><p><br/><br/></p><h1 id="转场合集"><a href="#转场合集" class="headerlink" title="转场合集"></a>转场合集</h1><h2 id="回忆快闪效果"><a href="#回忆快闪效果" class="headerlink" title="回忆快闪效果"></a>回忆快闪效果</h2><p><a href="https://www.bilibili.com/video/BV1mT411279N?p=1&vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb">https://www.bilibili.com/video/BV1mT411279N?p=1&amp;vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb</a></p><p>效果-视频效果-扭曲-变换</p><p>step1：V1轨道一放置打底素材，V2放效果素材，制作虚影效果</p><p>step2：效果搜索变换，放入V2轨道，关键帧，缩放（小变大），全选缓入</p><p>​使用合成快门角度不勾选，快门角度360，形成运动模糊的效果，</p><p>​中间不透明50%，最后不透明0</p><p>​</p><br/><h2 id="文字快闪"><a href="#文字快闪" class="headerlink" title="文字快闪"></a>文字快闪</h2><p>文字快闪：<a href="https://www.bilibili.com/video/BV1XW411G7dT?p=1&vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb">https://www.bilibili.com/video/BV1XW411G7dT?p=1&amp;vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb</a></p><p>鼓点插件：<a href="https://www.bilibili.com/video/BV1rg411Q7ry/?vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb">https://www.bilibili.com/video/BV1rg411Q7ry/?vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb</a></p><p>step1:ps制作文字psd，文案写入txt文档，ps图层T文字工具，图像变量，导入txt文档文案，导出数据组作为文件</p><p>step2：pr鼓点卡点音乐标记，可选用插件拓展，或者手动</p><p>step3：psd对应鼓点</p><br/><h2 id="闪烁抽帧转场"><a href="#闪烁抽帧转场" class="headerlink" title="闪烁抽帧转场"></a>闪烁抽帧转场</h2><br/><h2 id="切片转场"><a href="#切片转场" class="headerlink" title="切片转场"></a>切片转场</h2><br/><h2 id="丝滑变速转场"><a href="#丝滑变速转场" class="headerlink" title="丝滑变速转场"></a>丝滑变速转场</h2><br/><h2 id="相似物转场"><a href="#相似物转场" class="headerlink" title="相似物转场"></a>相似物转场</h2><br/><h2 id="黑场转场"><a href="#黑场转场" class="headerlink" title="黑场转场"></a>黑场转场</h2><br/><h2 id="切割转场"><a href="#切割转场" class="headerlink" title="切割转场"></a>切割转场</h2><br/><h2 id="瞳孔转场"><a href="#瞳孔转场" class="headerlink" title="瞳孔转场"></a>瞳孔转场</h2><br/><h2 id="无缝衔接转场"><a href="#无缝衔接转场" class="headerlink" title="无缝衔接转场"></a>无缝衔接转场</h2><br/><h2 id="左右拉镜转场"><a href="#左右拉镜转场" class="headerlink" title="左右拉镜转场"></a>左右拉镜转场</h2><br/><h2 id="文字遮罩转场"><a href="#文字遮罩转场" class="headerlink" title="文字遮罩转场"></a>文字遮罩转场</h2><br/><h2 id="开门转场"><a href="#开门转场" class="headerlink" title="开门转场"></a>开门转场</h2><br/><h2 id="分屏转场"><a href="#分屏转场" class="headerlink" title="分屏转场"></a>分屏转场</h2><br/><h2 id="静帧遮罩转场"><a href="#静帧遮罩转场" class="headerlink" title="静帧遮罩转场"></a>静帧遮罩转场</h2><br/><h2 id="RGB缩放转场"><a href="#RGB缩放转场" class="headerlink" title="RGB缩放转场"></a>RGB缩放转场</h2><br/><h2 id="地球穿梭转场"><a href="#地球穿梭转场" class="headerlink" title="地球穿梭转场"></a>地球穿梭转场</h2><br/><h2 id="水波纹转场"><a href="#水波纹转场" class="headerlink" title="水波纹转场"></a>水波纹转场</h2><br/><h2 id="胶片转场"><a href="#胶片转场" class="headerlink" title="胶片转场"></a>胶片转场</h2><br/><h2 id="漫画与现实交错转场"><a href="#漫画与现实交错转场" class="headerlink" title="漫画与现实交错转场"></a>漫画与现实交错转场</h2><br/><h2 id="信号干扰转场"><a href="#信号干扰转场" class="headerlink" title="信号干扰转场"></a>信号干扰转场</h2><br/><h2 id="笔刷转场"><a href="#笔刷转场" class="headerlink" title="笔刷转场"></a>笔刷转场</h2><br/><h2 id="囧妈转场"><a href="#囧妈转场" class="headerlink" title="囧妈转场"></a>囧妈转场</h2><br/><h2 id="亮度键转场"><a href="#亮度键转场" class="headerlink" title="亮度键转场"></a>亮度键转场</h2><br/><h2 id="网格缩放转场"><a href="#网格缩放转场" class="headerlink" title="网格缩放转场"></a>网格缩放转场</h2><br/><h2 id="镜头横向转场"><a href="#镜头横向转场" class="headerlink" title="镜头横向转场"></a>镜头横向转场</h2><br/><h2 id="超级顺滑转场"><a href="#超级顺滑转场" class="headerlink" title="超级顺滑转场"></a>超级顺滑转场</h2><br/><h2 id="绘画草图转场"><a href="#绘画草图转场" class="headerlink" title="绘画草图转场"></a>绘画草图转场</h2><br/><h2 id="拉镜抖动转场"><a href="#拉镜抖动转场" class="headerlink" title="拉镜抖动转场"></a>拉镜抖动转场</h2><br/><h2 id="漫威开头制作"><a href="#漫威开头制作" class="headerlink" title="漫威开头制作"></a>漫威开头制作</h2><br/><h2 id="闪屏拉镜教程"><a href="#闪屏拉镜教程" class="headerlink" title="闪屏拉镜教程"></a>闪屏拉镜教程</h2><br/><h2 id="清新笔刷转场"><a href="#清新笔刷转场" class="headerlink" title="清新笔刷转场"></a>清新笔刷转场</h2><br/><h2 id="人物快闪效果"><a href="#人物快闪效果" class="headerlink" title="人物快闪效果"></a>人物快闪效果</h2><br/><h2 id="碟中谍文字出场"><a href="#碟中谍文字出场" class="headerlink" title="碟中谍文字出场"></a>碟中谍文字出场</h2><br/><h2 id="漫画与现实交错"><a href="#漫画与现实交错" class="headerlink" title="漫画与现实交错"></a>漫画与现实交错</h2><br/><h2 id="颜色匹配教程"><a href="#颜色匹配教程" class="headerlink" title="颜色匹配教程"></a>颜色匹配教程</h2><br/><h2 id="慢速升格教程"><a href="#慢速升格教程" class="headerlink" title="慢速升格教程"></a>慢速升格教程</h2><br/><h2 id="B站转场视频"><a href="#B站转场视频" class="headerlink" title="B站转场视频"></a>B站转场视频</h2><br/><h2 id="去水印的四种方法"><a href="#去水印的四种方法" class="headerlink" title="去水印的四种方法"></a>去水印的四种方法</h2><br/><h2 id="画画燃烧转场"><a href="#画画燃烧转场" class="headerlink" title="画画燃烧转场"></a>画画燃烧转场</h2><br/><h2 id="手擦黑板转场"><a href="#手擦黑板转场" class="headerlink" title="手擦黑板转场"></a>手擦黑板转场</h2><br/><h2 id="炫酷渐变转场"><a href="#炫酷渐变转场" class="headerlink" title="炫酷渐变转场"></a>炫酷渐变转场</h2><p><br/><br/></p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="初识PR-界面布局及工作流程"><a href="#初识PR-界面布局及工作流程" class="headerlink" title="初识PR-界面布局及工作流程"></a>初识PR-界面布局及工作流程</h2><br/><h3 id="工作窗口"><a href="#工作窗口" class="headerlink" title="工作窗口"></a>工作窗口</h3><p><img src="/weiran12123.github.io/./pic/%E7%B2%97%E5%89%AA%E6%B5%81%E7%A8%8B.png" alt="粗剪流程"></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>新建项目-新建序列-导入素材-制作-导出</p><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><br/><h2 id="剪辑技巧和工具接受-上-下"><a href="#剪辑技巧和工具接受-上-下" class="headerlink" title="剪辑技巧和工具接受(上)(下)"></a>剪辑技巧和工具接受(上)(下)</h2><br/><h2 id="关键帧动画预设及混合模式"><a href="#关键帧动画预设及混合模式" class="headerlink" title="关键帧动画预设及混合模式"></a>关键帧动画预设及混合模式</h2><br/><h1 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h1><p>视频特效(上)(下)</p><p>音频及结合AU去除噪音</p><p>字幕运用</p><p>转场世界</p><p>调色(上)(下)</p><p>多机位剪辑</p><br/><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>mv</p><p>宣传片</p><p>婚礼视频</p><p>影视片头</p><br/><h1 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h1><p><a href="https://space.bilibili.com/396447211/channel/seriesdetail?sid=306386">阿柑影像堂的个人空间_哔哩哔哩_bilibili</a></p><br/><h2 id="字幕添加"><a href="#字幕添加" class="headerlink" title="字幕添加"></a>字幕添加</h2><p><a href="https://www.bilibili.com/video/BV117411t7TB/?spm_id_from=333.337.search-card.all.click&vd_source=8d4fa6f3c011527c7c1f6eb84fec3eeb">【pr教程2：视频添加字幕】这是关于pr加字幕最全的教程，这集是最简单易懂的方法。_哔哩哔哩_bilibili</a></p><br/><h2 id="无缝转场"><a href="#无缝转场" class="headerlink" title="无缝转场"></a>无缝转场</h2><br/><h2 id="脚本分镜"><a href="#脚本分镜" class="headerlink" title="脚本分镜"></a>脚本分镜</h2><br/><h2 id="调色"><a href="#调色" class="headerlink" title="调色"></a>调色</h2><br/><h2 id="遮罩抠像"><a href="#遮罩抠像" class="headerlink" title="遮罩抠像"></a>遮罩抠像</h2><p><br/><br/></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="PR2022拓展点击没反应"><a href="#PR2022拓展点击没反应" class="headerlink" title="PR2022拓展点击没反应"></a>PR2022拓展点击没反应</h2><blockquote><ol><li><p>按Windows + R 快捷键，弹出的运行框，输入 regedit，然后点确定按钮 </p></li><li><p>打开的注册表编辑器，定位到如下位置<br>cmd中输入regedit<br>计算机\HKEY_CURRENT_USER\SOFTWARE\Adobe\CSXS.11<br>提示：可以看到我这里有 CSXS.3、CSXS.10、CSXS.11 这3个，如果你是pr其他版本，可以尝试在另外的这CSXS.3 或 CSXS.10 子级下按此方法操作 </p></li><li><p>打开的注册表编辑器，定位到如下位置<br>计算机\HKEY_CURRENT_USER\SOFTWARE\Adobe\CSXS.11<br>提示：可以看到我这里有 CSXS.3、CSXS.10、CSXS.11 这3个，如果你是pr其他版本，可以尝试在另外的这CSXS.3 或 CSXS.10 子级下按此方法操作 </p></li><li><p>打开的注册表编辑器，定位到如下位置<br>计算机\HKEY_CURRENT_USER\SOFTWARE\Adobe\CSXS.11<br>提示：可以看到我这里有 CSXS.3、CSXS.10、CSXS.11 这3个，如果你是pr其他版本，可以尝试在另外的这CSXS.3 或 CSXS.10 子级下按此方法操作 </p></li><li><p>然后重启pr ，就可以打开菜单栏：窗口——扩展 中的插件啦</p></li></ol><ul><li>文章来源:<br><a href="https://www.bilibili.com/read/cv17496775/">https://www.bilibili.com/read/cv17496775/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tools</title>
      <link href="/weiran12123.github.io/2023/10/09/tools/"/>
      <url>/weiran12123.github.io/2023/10/09/tools/</url>
      
        <content type="html"><![CDATA[<h1 id="开发者网站"><a href="#开发者网站" class="headerlink" title="开发者网站"></a>开发者网站</h1><h2 id="代码托管平台"><a href="#代码托管平台" class="headerlink" title="代码托管平台"></a>代码托管平台</h2><ul><li>GitHub:<a href="https://github.com/">https://github.com/</a></li><li>Vercel:<a href="https://vercel.com/">https://vercel.com/</a></li></ul><br/><h2 id="技术交流社区"><a href="#技术交流社区" class="headerlink" title="技术交流社区"></a>技术交流社区</h2><ul><li>掘金:<a href="https://juejin.im/">https://juejin.im/</a></li><li>博客园:<a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></li><li>CSDN:<a href="https://www.csdn.net/">https://www.csdn.net/</a></li></ul><br/><h2 id="自由工作者平台"><a href="#自由工作者平台" class="headerlink" title="自由工作者平台"></a>自由工作者平台</h2><ul><li>程序员客栈:<a href="https://www.proginn.com/">https://www.proginn.com/</a></li></ul><br/><h2 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h2><ul><li>LintCode:<a href="https://www.lintcode.com/zh-cn/">https://www.lintcode.com/zh-cn/</a></li><li>LeetCode:<a href="https://leetcode.com/">https://leetcode.com/</a></li><li>LeetCode中文站:<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li><li>牛客网:<a href="https://www.nowcoder.com/">https://www.nowcoder.com/</a></li><li>Web开发练习题:<a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a></li></ul><br/><h2 id="大数据开发技术"><a href="#大数据开发技术" class="headerlink" title="大数据开发技术"></a>大数据开发技术</h2><ul><li>大数据软件安装和基础编程实践指南(2020年6月版)_厦大数据库实验室博客:<a href="https://dblab.xmu.edu.cn/blog/2630/">https://dblab.xmu.edu.cn/blog/2630/</a></li></ul><br/><h2 id="Linux指令清单"><a href="#Linux指令清单" class="headerlink" title="Linux指令清单"></a>Linux指令清单</h2><ul><li>鸟哥LInux命令大全:<a href="https://man.niaoge.com/">https://man.niaoge.com/</a></li><li>Linux命令大全:<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li></ul><br/><h2 id="虚拟号码"><a href="#虚拟号码" class="headerlink" title="虚拟号码"></a>虚拟号码</h2><ul><li><a href="https://sms-activate.org/freeNumbers">https://sms-activate.org/freeNumbers</a></li></ul><br/><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><ul><li><a href="https://xmrth.fun/auth/login">https://xmrth.fun/auth/login</a>   防失联公告板:<a href="https://xmrth.net/">https://xmrth.net</a></li></ul><p><br/><br/></p><h1 id="软件库"><a href="#软件库" class="headerlink" title="软件库"></a>软件库</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="idea激活码"><a href="#idea激活码" class="headerlink" title="idea激活码"></a>idea激活码</h3><ul><li>免费提供最新IDEA注册码, IDEA专属激活码, IDEA注册码在线生成:<a href="https://idea.javatiku.cn/">https://idea.javatiku.cn/</a></li><li>最新IDEA激活码-IDEA破解教程,pycharm激活码,datagrip激活码,IDEA注册码:<a href="http://idea.hicxy.com/">http://idea.hicxy.com/</a></li></ul><br/><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><ul><li>最新 PyCharm 绿色破解版，打开即用，永久激活至2099年!:<a href="https://www.javatiku.cn/pycharm/846.html">https://www.javatiku.cn/pycharm/846.html</a></li></ul><br/><h2 id="格式转化工具"><a href="#格式转化工具" class="headerlink" title="格式转化工具"></a>格式转化工具</h2><ul><li>PDF24 Tools-免费且易于使用的在线PDF工具:<a href="https://tools.pdf24.org/zh/">https://tools.pdf24.org/zh/</a></li><li>格式工厂-免费多功能的多媒体文件转换工具:<a href="http://formatfactory.org/CN/download.html">http://formatfactory.org/CN/download.html</a></li></ul><br/><h2 id="短视频下载工具"><a href="#短视频下载工具" class="headerlink" title="短视频下载工具"></a>短视频下载工具</h2><h3 id="bilibili视频下载器"><a href="#bilibili视频下载器" class="headerlink" title="bilibili视频下载器"></a>bilibili视频下载器</h3><ul><li>鼠鼠下载器:<a href="https://jinghua.lanzoul.com/ihMnJ0b8kx6j">https://jinghua.lanzoul.com/ihMnJ0b8kx6j</a></li><li>唧唧Down:<a href="http://client.jijidown.com/?ref=kkok.cc">http://client.jijidown.com/?ref=kkok.cc</a></li></ul><br/><h3 id="抖音视频下载器"><a href="#抖音视频下载器" class="headerlink" title="抖音视频下载器"></a>抖音视频下载器</h3><ul><li><p>抖音采集工具:<a href="https://jinghua.lanzoul.com/ixABtOmx9vxe">https://jinghua.lanzoul.com/ixABtOmx9vxe</a></p></li><li><p>侠客短视频解析:<a href="https://pan.quark.cn/s/8a7a86d7f902">https://pan.quark.cn/s/8a7a86d7f902</a></p></li></ul><p><br/><br/></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><h2 id="文档格式转化"><a href="#文档格式转化" class="headerlink" title="文档格式转化"></a>文档格式转化</h2><ul><li>图片在线转换base64编码-在线base64编码转换成图片工具:<a href="http://www.jsons.cn/img2base64/">http://www.jsons.cn/img2base64/</a></li></ul><br/><br/><h1 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h1><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><ul><li>wallhaven:<a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li>4k壁纸_彼岸图网:<a href="https://pic.netbian.com/4k/index_61.html">https://pic.netbian.com/4k/index_61.html</a></li></ul><h2 id="剪辑素材"><a href="#剪辑素材" class="headerlink" title="剪辑素材"></a>剪辑素材</h2><ul><li>通过台词找电影:<a href="https://33.agilestudio.cn/">https://33.agilestudio.cn/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据开发技术</title>
      <link href="/weiran12123.github.io/2023/10/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
      <url>/weiran12123.github.io/2023/10/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><blockquote><p>centos-7-x86_64-dvd-2009.iso</p><p>VMware Workstation 15.5</p><p>jdk1.8</p><p>hadoop-3.3.1</p></blockquote><h2 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">创建hadoop用户</span><br><span class="line">[root@localhost~]# sudo useradd -m hadoop -s /bin/bash</span><br><span class="line"></span><br><span class="line">将hadoop添加到sudoer中, root用户编辑sudoers文件：</span><br><span class="line">[root@localhost~] # sudo vi /etc/sudoers</span><br><span class="line">增加下面信息到文件中:</span><br><span class="line">hadoop ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line">设置hadoop密码方式1:(下面方式，可以避开密码合规检查)</span><br><span class="line">[root@localhost~]# sudo echo &quot;123456&quot;|passwd --stdin hadoop</span><br><span class="line"></span><br><span class="line">设置hadoop密码方式2:(按提示输入两次密码:)</span><br><span class="line">[root@localhost~]# sudo passwd hadoop</span><br><span class="line"></span><br><span class="line">设置主机名方式1:</span><br><span class="line">[root@localhost~]$ sudo vi /etc/hostname</span><br><span class="line">修改值为: hadoop</span><br><span class="line"></span><br><span class="line">设置主机名方式2:</span><br><span class="line">[root@localhost~]$ sudo hostnamectl set-hostname hadoop</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">更新apt（apt   =   安装包管理工具）</span><br><span class="line">4.sudo apt-get update</span><br><span class="line">若出现如下 &quot;Hash校验和不符&quot; 的提示，可通过更改软件源来解决</span><br><span class="line">选择【软件和更新】</span><br><span class="line">点击 “下载自” 右侧的方框，选择【其他节点】</span><br><span class="line">在列表中选中【mirrors.aliyun.com】，并点击右下角的【选择服务器】，会要求输入用户密码，输入即可。</span><br><span class="line">接着点击关闭。</span><br><span class="line">此时会提示列表信息过时，点击【重新载入】，</span><br><span class="line"></span><br><span class="line">下载vim   --   没有vim可以用gedit</span><br><span class="line">\5. sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">安装下载openssh-server</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum install -y openssh-server</span><br><span class="line"></span><br><span class="line">通过ssh登陆本机</span><br><span class="line">[hadoop@hadoop ~]$ ssh localhost</span><br><span class="line">[hadoop@hadoop ~]$ exit</span><br><span class="line"></span><br><span class="line">创建密钥</span><br><span class="line">[hadoop@hadoop .ssh]$ ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">拷贝公钥</span><br><span class="line">[hadoop@hadoop ~]$ cd ~/.ssh/</span><br><span class="line">[hadoop@hadoop .ssh]$ ssh-copy-id -i ./id_rsa.pub hadoop@localhost</span><br><span class="line"></span><br><span class="line">原理:b机器有我们的公钥，我们可以通过私钥不需要密码就登录</span><br></pre></td></tr></table></figure><h2 id="JDK部署"><a href="#JDK部署" class="headerlink" title="JDK部署"></a>JDK部署</h2><p>step1:删除openjdk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">检查是否含有openjdk</span><br><span class="line">[hadoop@hadoop ~]$ rpm -qa|grep java</span><br><span class="line"></span><br><span class="line">如果存在，则先卸载</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y java*</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y tzdata-java-2023c-1.el7.noarch</span><br><span class="line">....和java相关的，都卸载。</span><br></pre></td></tr></table></figure><p>step2:部署jdk</p><p>jdk下载地址：<a href="https://www.oracle.com/cn/java/technologies/downloads/">https://www.oracle.com/cn/java/technologies/downloads/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">创建存放jdk1.8的存放目录</span><br><span class="line">[hadoop@hadoop ~]$ sudo mkdir /usr/lib/jvm</span><br><span class="line"></span><br><span class="line">解压jdk压缩包</span><br><span class="line">[hadoop@hadoop ~]$ sudo tar -zxvf ./jdk-8u371-linux-x64.tar.gz -C /usr/lib/jvm/</span><br><span class="line"></span><br><span class="line">配置环境变量</span><br><span class="line">[hadoop@hadoop ~]$ vim ~/.bashrc</span><br><span class="line">添加以下内容:</span><br><span class="line"># java</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line">使环境变量生效</span><br><span class="line">[hadoop@hadoop ~]$ source ~/.bashrc</span><br><span class="line"></span><br><span class="line">验证是否配置成功</span><br><span class="line">[hadoop@hadoop ~]$ java -version</span><br></pre></td></tr></table></figure><h2 id="Hadoop部署"><a href="#Hadoop部署" class="headerlink" title="Hadoop部署"></a>Hadoop部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">解压hadoop压缩包到/usr/local目录下</span><br><span class="line">[hadoop@hadoop ~]$ sudo tar -zxvf ./hadoop-3.3.1.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">将文件夹名改为hadoop,方便操作</span><br><span class="line">[hadoop@hadoop ~]$ sudo mv /usr/local/hadoop-3.3.1/ /usr/local/hadoop</span><br><span class="line"></span><br><span class="line">修改文件权限</span><br><span class="line">[hadoop@hadoop local]$ sudo chown -R hadoop:hadoop /usr/local/hadoop/</span><br><span class="line"></span><br><span class="line">检查是否可用</span><br><span class="line">[hadoop@hadoop ~]$ cd /usr/local/hadoop</span><br><span class="line">[hadoop@hadoop hadoop]$ ./bin/hadoop version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置hadoop环境变量:</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">添加以下内容：</span><br><span class="line"># hadoop</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;HADOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="Hadoop单机"><a href="#Hadoop单机" class="headerlink" title="Hadoop单机"></a>Hadoop单机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看全部自带的例子，包括 wordcount、terasort、join、grep 等。</span><br><span class="line">[hadoop@hadoop hadoop]$ ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar</span><br><span class="line"></span><br><span class="line">运行 grep 例子</span><br><span class="line">将 input 文件夹中的所有文件作为输入，筛选当中符合正则表达式 dfs[a-z.]+ 的单词并统计出现的次数，最后输出结果到 output 文件夹中。</span><br><span class="line">[hadoop@hadoop ~]$ cd /usr/local/hadoop</span><br><span class="line">[hadoop@hadoop hadoop]$ mkdir ./input</span><br><span class="line">[hadoop@hadoop hadoop]$ cp ./etc/hadoop/*.xml ./input # 将配置文件作为输入文件</span><br><span class="line">[hadoop@hadoop hadoop]$ ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar</span><br><span class="line">[hadoop@hadoop hadoop]$ grep ./input ./output &#x27;dfs[a-z.]+&#x27;</span><br><span class="line">[hadoop@hadoop hadoop]$ cat ./output/* # 查看运行结果</span><br></pre></td></tr></table></figure><h2 id="Hadoop伪分布式配置"><a href="#Hadoop伪分布式配置" class="headerlink" title="Hadoop伪分布式配置"></a>Hadoop伪分布式配置</h2><blockquote><p>Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为</p><p>NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。</p><p>Hadoop 的配置文件位于 &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F; 中，伪分布式需要修改2个配置文件 <strong>core-site.xml</strong></p><p>和 <strong>hdfs-site.xml</strong> 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和</p><p>value 的方式来实现</p></blockquote><p>先删除input output文件</p><h3 id="step1-修改配置文件-core-site-xml"><a href="#step1-修改配置文件-core-site-xml" class="headerlink" title="step1: 修改配置文件 core-site.xml"></a>step1: 修改配置文件 core-site.xml</h3><blockquote><p>若没有配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 &#x2F;tmp&#x2F;hadoo-hadoop，而这个目录在重</p><p>启时有可能被系统清理掉，导致必须重新执行 format 才行。</p><p>hadoop.tmp.dir：临时文件目录</p><p>fs.defaultFS：集群访问地址。hdfs - 指定文件系统，localhost:9000即namenode的地 址。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop hadoop]$ vim /usr/local/hadoop/etc/hadoop/core-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="step2-修改配置文件-hdfs-site-xml"><a href="#step2-修改配置文件-hdfs-site-xml" class="headerlink" title="step2: 修改配置文件 hdfs-site.xml"></a>step2: 修改配置文件 hdfs-site.xml</h3><blockquote><p>同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop hadoop]$ vim /usr/local/hadoop/etc/hadoop/hdfs-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="step3-NameNode-的格式化"><a href="#step3-NameNode-的格式化" class="headerlink" title="step3: NameNode 的格式化"></a>step3: NameNode 的格式化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop hadoop]$ cd /usr/local/hadoop</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop hadoop]$ ./bin/hdfs namenode -format</span><br><span class="line"></span><br><span class="line">开启 NameNode 和 DataNode 守护进程</span><br><span class="line">[hadoop@hadoop hadoop]$ cd /usr/local/hadoop</span><br><span class="line">[hadoop@hadoop hadoop]$ ./sbin/start-dfs.sh #start-dfs.sh是个完整的可执行文件，中间没有空格</span><br><span class="line"></span><br><span class="line">JPS正常显示以下</span><br><span class="line">12354 Jps</span><br><span class="line">11829 NameNode</span><br><span class="line">12214 SecondaryNameNode</span><br><span class="line">11961 DataNode</span><br><span class="line">表示成功</span><br><span class="line"></span><br><span class="line">网页查询</span><br><span class="line">ip:9000</span><br></pre></td></tr></table></figure><h2 id="YARN配置"><a href="#YARN配置" class="headerlink" title="YARN配置"></a>YARN配置</h2><blockquote><p>YARN 负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性。</p><p>启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况。</p></blockquote><h3 id="step1-修改配置文件mapred-site-xml"><a href="#step1-修改配置文件mapred-site-xml" class="headerlink" title="step1:修改配置文件mapred-site.xml"></a>step1:修改配置文件mapred-site.xml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/local/hadoop/etc/hadoop/mapred-site.xml.template /usr/loca/hadoop/etc/hadoop/mapred-site.xml</span><br><span class="line">sudo vim /usr/local/hadoop/etc/hadoop/mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="step2-修改配置文件yarn-site-xml"><a href="#step2-修改配置文件yarn-site-xml" class="headerlink" title="step2:修改配置文件yarn-site.xml"></a>step2:修改配置文件yarn-site.xml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hadoop/etc/hadoop/yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="step3-启动YARN"><a href="#step3-启动YARN" class="headerlink" title="step3:启动YARN"></a>step3:启动YARN</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">先启动hadoop</span><br><span class="line">/usr/local/hadoop/sbin/start-dfs.sh</span><br><span class="line"></span><br><span class="line">启动YARN</span><br><span class="line">/usr/local/hadoop/sbin/start-yarn.sh</span><br><span class="line"></span><br><span class="line">执行jps，观察进程情况</span><br><span class="line">jps</span><br><span class="line">15472 ResourceManager</span><br><span class="line">14978 DataNode</span><br><span class="line">15222 SecondaryNameNode</span><br><span class="line">15863 Jps</span><br><span class="line">14841 NameNode</span><br><span class="line">15595 NodeManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">YARN Web页面</span><br><span class="line">http://local:8088/cluster 远程：</span><br><span class="line">http://192.168.197.251:8088/cluster</span><br><span class="line"></span><br><span class="line">关闭yarn</span><br><span class="line">/usr/local/hadoop/sbin/stop-yarn.sh</span><br><span class="line">/usr/local/hadoop/sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure><h2 id="Hadoop基础操作"><a href="#Hadoop基础操作" class="headerlink" title="Hadoop基础操作"></a>Hadoop基础操作</h2><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h1 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h1><h2 id="先决条件-1"><a href="#先决条件-1" class="headerlink" title="先决条件"></a>先决条件</h2><blockquote><p>centos-7-x86_64-dvd-2009.iso</p><p>VMware Workstation 15.5</p><p>jdk1.8</p><p>hadoop-3.3.1</p><p>hbase-1.1.2</p></blockquote><h2 id="Hbase部署"><a href="#Hbase部署" class="headerlink" title="Hbase部署"></a>Hbase部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">解压缩hbase压缩包</span><br><span class="line">[hadoop@localhost ~]$ sudo tar -zxvf ./hbase-1.1.2-bin.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">修改名字，方便操作</span><br><span class="line">[hadoop@localhost ~]$ sudo mv /usr/local/hbase-1.1.2-bin /usr/local/hbase</span><br><span class="line"></span><br><span class="line">hbase修改权限</span><br><span class="line">[hadoop@localhost ~]$ sudo chown -R hadoop:hadoop /usr/local/hbase</span><br><span class="line"></span><br><span class="line">配置环境变量</span><br><span class="line">[hadoop@localhost ~]$ sudo vim ~/.bashrc</span><br><span class="line">添加以下内容</span><br><span class="line"># hbase</span><br><span class="line">export PATH=$PATH:/usr/local/hbase/bin</span><br><span class="line"></span><br><span class="line">使环境变量生效</span><br><span class="line">[hadoop@localhost ~]$ source ~/.bashrc</span><br><span class="line"></span><br><span class="line">验证是否安装成功</span><br><span class="line">[hadoop@localhost ~]$ /usr/local/hbase/bin/hbase version</span><br></pre></td></tr></table></figure><h2 id="Hbase单机配置"><a href="#Hbase单机配置" class="headerlink" title="Hbase单机配置"></a>Hbase单机配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-env.sh</span><br><span class="line"></span><br><span class="line">找对应语句,去掉注释</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162</span><br><span class="line">export HBASE_MANAGES_ZK=true // 表示由hbase自己管理zookeeper</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">            &lt;property&gt;</span><br><span class="line">                    &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                    &lt;value&gt;file:///usr/local/hbase/hbase-tmp&lt;/value&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  </span><br><span class="line">在启动HBase前需要设置属性hbase.rootdir，用于指定HBase数据的存储位置，因为如果不设置的话，hbase.rootdir默认为/tmp/hbase-$&#123;user.name&#125;,这意味着每次重启系统都会丢失数据。此处设置为HBase安装目录下的hbase-tmp文件夹即(/usr/local/hbase/hbase-tmp)</span><br></pre></td></tr></table></figure><h2 id="Hbase伪分布式模式配置"><a href="#Hbase伪分布式模式配置" class="headerlink" title="Hbase伪分布式模式配置"></a>Hbase伪分布式模式配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-env.sh</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371</span><br><span class="line">export HBASE_CLASSPATH=/usr/local/hbase/conf </span><br><span class="line">export HBASE_MANAGES_ZK=true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">            &lt;property&gt;</span><br><span class="line">                    &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                    &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;property&gt;</span><br><span class="line">                    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">                    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">修改hbase.rootdir，指定HBase数据在HDFS上的存储路径；将属性hbase.cluter.distributed设置为true。假设当前Hadoop集群运行在伪分布式模式下，在本机上运行，且NameNode运行在9000端口。</span><br><span class="line">hbase.cluster.distributed设置集群处于分布式模式</span><br></pre></td></tr></table></figure><h2 id="启动Hbase"><a href="#启动Hbase" class="headerlink" title="启动Hbase"></a>启动Hbase</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]$ cd /usr/local/hbase</span><br><span class="line">[hadoop@localhost local]$ bin/start-hbase.sh</span><br><span class="line">[hadoop@localhost local]$ bin/hbase shell</span><br></pre></td></tr></table></figure><h2 id="Hbase基础操作"><a href="#Hbase基础操作" class="headerlink" title="Hbase基础操作"></a>Hbase基础操作</h2><p>查看当前表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; list</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; create &#x27;student&#x27;,&#x27;Sname&#x27;,&#x27;Ssex&#x27;,&#x27;Sage&#x27;,&#x27;Sdept&#x27;,&#x27;course&#x27;</span><br></pre></td></tr></table></figure><p>查看表基本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>增加数据</p><blockquote><p>HBase中用put命令添加数据，注意：一次只能为一个表的一行数据的一个列，也就是一个单元格添加一个数据，所以直接用shell命令插入数据效率很低，在实际应用中，一般都是利用编程操作数据。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">put &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;Sname&#x27;,&#x27;LiYing&#x27;</span><br><span class="line"></span><br><span class="line">表示为student表添加了学号为95001，名字为LiYing的一行数据，其行键为95001。</span><br></pre></td></tr></table></figure><p>删除数据</p><blockquote><p>在HBase中用delete以及deleteall命令进行删除数据操作，它们的区别是：</p><ol><li>delete用于删除一个数据，是put的反向操作；</li><li>deleteall操作用于删除一行数据</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delete命令</span><br><span class="line">delete &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;Ssex&#x27;</span><br><span class="line">即删除了student表中95001行下的Ssex列的所有数据</span><br><span class="line"></span><br><span class="line">deleteall命令</span><br><span class="line">deleteall &#x27;student&#x27;,&#x27;95001&#x27;</span><br><span class="line">即删除了student表中的95001行的全部数据</span><br></pre></td></tr></table></figure><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="先决条件-2"><a href="#先决条件-2" class="headerlink" title="先决条件"></a>先决条件</h2><blockquote><p>基于hadoop搭建</p><p>apache-hive-1.2.1</p></blockquote><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h2 id="Scala环境配置"><a href="#Scala环境配置" class="headerlink" title="Scala环境配置"></a>Scala环境配置</h2><h3 id="JDK部署-1"><a href="#JDK部署-1" class="headerlink" title="JDK部署"></a>JDK部署</h3><p>jdk官方传送门：<a href="https://www.oracle.com/cn/java/technologies/downloads/">https://www.oracle.com/cn/java/technologies/downloads/</a></p><p>百度网盘链接：<a href="https://pan.baidu.com/s/1H3o2BfQWHcjPXCAVz3syHg">https://pan.baidu.com/s/1H3o2BfQWHcjPXCAVz3syHg</a><br>提取码：qx5v</p><p>step1:删除openjdk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">检查是否含有openjdk</span><br><span class="line">[hadoop@hadoop ~]$ rpm -qa|grep java</span><br><span class="line"></span><br><span class="line">如果存在，则先卸载</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y java*</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">[hadoop@hadoop ~]$ sudo yum remove -y tzdata-java-2023c-1.el7.noarch</span><br><span class="line">....和java相关的，都卸载。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">创建存放jdk1.8的存放目录</span><br><span class="line">[hadoop@hadoop ~]$ sudo mkdir /usr/lib/jvm</span><br><span class="line"></span><br><span class="line">解压jdk压缩包</span><br><span class="line">[hadoop@hadoop ~]$ sudo tar -zxvf ./jdk-8u371-linux-x64.tar.gz -C /usr/lib/jvm/</span><br><span class="line"></span><br><span class="line">配置环境变量</span><br><span class="line">[hadoop@hadoop ~]$ vim ~/.bashrc</span><br><span class="line">添加以下内容:</span><br><span class="line"># java</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line">使环境变量生效</span><br><span class="line">[hadoop@hadoop ~]$ source ~/.bashrc</span><br><span class="line"></span><br><span class="line">验证是否配置成功</span><br><span class="line">[hadoop@hadoop ~]$ java -version</span><br></pre></td></tr></table></figure><h3 id="Scala部署"><a href="#Scala部署" class="headerlink" title="Scala部署"></a>Scala部署</h3><p>Scala传送门：<a href="https://www.scala-lang.org/download/">安装 |Scala编程语言 (scala-lang.org)</a></p><p>step3:配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line">[hadoop@hadoop local]$ sudo tar -zxvf scala-2.11.8.tgz -C /usr/local</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop local]$ sudo vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">#scala</span><br><span class="line">export SCALA_HOME=/usr/local/scala-2.11.8</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop local]$ source ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="Spark部署"><a href="#Spark部署" class="headerlink" title="Spark部署"></a>Spark部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line">[hadoop@hadoop soft]$ sudo tar -zxvf spark-2.3.0-bin-without-hadoop.tgz -C /usr/local</span><br><span class="line"></span><br><span class="line">改名</span><br><span class="line">[hadoop@hadoop local]$ sudo mv /usr/local/spark-2.3.0-bin-without-hadoop/ /usr/local/spark</span><br><span class="line"></span><br><span class="line">授予权限</span><br><span class="line">[hadoop@hadoop local]$ sudo chown -R hadoop:hadoop /usr/local/spark</span><br><span class="line"></span><br><span class="line">复制配置文件</span><br><span class="line">[hadoop@hadoop local]$ cp /usr/local/spark/conf/spark-env.sh.template /usr/local/spark/conf/spark-env.sh</span><br><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">[hadoop@hadoop local]$ vim /usr/local/spark/conf/spark-env.sh</span><br><span class="line">添加以下内容</span><br><span class="line">export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath)</span><br><span class="line"></span><br><span class="line">运行Spark示例，验证是否安装成功</span><br><span class="line">[hadoop@hadoop local]$ cd /usr/local/spark</span><br><span class="line">[hadoop@hadoop spark]$ bin/run-example SparkPi</span><br><span class="line">[hadoop@hadoop spark] bin/run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is&quot;</span><br><span class="line"></span><br><span class="line">启动Spark Shell</span><br><span class="line">[hadoop@hadoop spark] cd /usr/local/spark</span><br><span class="line">[hadoop@hadoop spark] bin/spark-shell</span><br></pre></td></tr></table></figure><h2 id="Spark基本操作"><a href="#Spark基本操作" class="headerlink" title="Spark基本操作"></a>Spark基本操作</h2>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/weiran12123.github.io/2023/09/21/Markdown/"/>
      <url>/weiran12123.github.io/2023/09/21/Markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown文档"><a href="#Markdown文档" class="headerlink" title="Markdown文档"></a>Markdown文档</h2><blockquote><p>Markdown官方文档：<a href="https://markdown.com.cn/">Markdown 官方教程</a></p><p>菜鸟教程：<a href="https://www.runoob.com/markdown/md-title.html">Markdown | 菜鸟教程 (runoob.com)</a></p></blockquote><br/><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong></p></blockquote><br/><h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#// 一级标题</span><br><span class="line">##// 二级标题</span><br><span class="line">###// 三级标题</span><br><span class="line">####// 四级标题</span><br><span class="line">#####// 五级标题</span><br><span class="line">######// 六级标题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一级标题</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 首行缩进，下面语法表示前面空了两个文字的格</span><br><span class="line">&amp;ensp;&amp;ensp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 换行</span><br><span class="line">在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(`&lt;br&gt;`)。</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown字体"><a href="#Markdown字体" class="headerlink" title="Markdown字体"></a>Markdown字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用1个星号*或1个底线_表示斜体</span><br><span class="line">用2个星号*或2个底线__表示粗体</span><br><span class="line">用3个星号*或3个底线___表示粗斜体</span><br><span class="line"></span><br><span class="line">*斜体文字*</span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line">**粗体文字**</span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line">***粗斜体文字***</span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><blockquote><p>Markdown支持有序列表和无序列表，无序列表使用星号(*)、加号(+)或者减号(-)作为标记：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 无序列表</span><br><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 有序列表</span><br><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 列表嵌套</span><br><span class="line">1. 第一项</span><br><span class="line">* 第一项嵌套的第一个元素</span><br><span class="line">* 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项</span><br><span class="line">* 第二项嵌套的第一个元素</span><br><span class="line">* 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown代码框"><a href="#Markdown代码框" class="headerlink" title="Markdown代码框"></a>Markdown代码框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">单行代码，两个反引号</span><br><span class="line">`print(&quot;单行代码&quot;)`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多行代码，代码块，六个反引号</span><br><span class="line">​```</span><br><span class="line">str = &quot;多行代码,代码块&quot;</span><br><span class="line">print(str)</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><blockquote><p>作用：让文章看起来更有层次感</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 使用区块</span><br><span class="line">&gt; Hello World</span><br><span class="line">&gt; I am Markdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; 3. 第三项</span><br><span class="line">&gt; * 第一项</span><br><span class="line">&gt; * 第二项</span><br><span class="line">&gt; * 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 列表中使用区块</span><br><span class="line">1. 第一项</span><br><span class="line">* Markdown教程</span><br><span class="line">* 学的不仅是技术更是梦想</span><br><span class="line">2. 第二项</span><br><span class="line">* Markdown教程</span><br><span class="line">* 学的不仅是技术更是梦想</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 区块的嵌套</span><br><span class="line">&gt; 第一层区块</span><br><span class="line">&gt;&gt; 第二层区块</span><br><span class="line">&gt;&gt;&gt; 第三层区块</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown分隔线"><a href="#Markdown分隔线" class="headerlink" title="Markdown分隔线"></a>Markdown分隔线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 不带空格</span><br><span class="line">___// 三个下划线</span><br><span class="line">***// 三个星号</span><br><span class="line">---// 三个减号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 带空格</span><br><span class="line">_ _ _// 三个下划线</span><br><span class="line">* * *// 三个星号</span><br><span class="line">- - -// 三个减号</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown删除线"><a href="#Markdown删除线" class="headerlink" title="Markdown删除线"></a>Markdown删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown下划线"><a href="#Markdown下划线" class="headerlink" title="Markdown下划线"></a>Markdown下划线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown脚注"><a href="#Markdown脚注" class="headerlink" title="Markdown脚注"></a>Markdown脚注</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]:</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">或者</span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">这是一个链接 [新浪新闻](https://news.sina.com.cn/)</span><br><span class="line">&lt;https://news.sina.com.cn/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 高级链接</span><br><span class="line">[baidu][1]</span><br><span class="line">[1]:http://www.baidu.com</span><br><span class="line"></span><br><span class="line">[Markdown][markdown]</span><br><span class="line">[markdown]: http://www.markdown.com</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">![有问题上知乎](imgage地址 &quot;图片标题&quot;)</span><br><span class="line"></span><br><span class="line">Markdown 没有办法指定图片的高度与宽度，如果需要的话，可以使用普通的</span><br><span class="line">&lt;img src=“https://pic4.zhimg.com/80/v2-a47051e92cf74930bedd7469978e6c08_hd.png” width=10%&gt;</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown转义字符"><a href="#Markdown转义字符" class="headerlink" title="Markdown转义字符"></a>Markdown转义字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗**</span><br><span class="line">\*\*正常显示星号\*\*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mrkdown支持以下这些符号前面加上反斜杠来帮助插入普通符号：</span><br><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br><span class="line">|  管道符</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对齐方式</span><br><span class="line"></span><br><span class="line">-: 设置内容和标题栏居右对齐。</span><br><span class="line"></span><br><span class="line">:- 设置内容和标题栏居左对齐。</span><br><span class="line"></span><br><span class="line">:-: 设置内容和标题栏居中对齐</span><br><span class="line"></span><br><span class="line">Ctrl+Enter 切换带</span><br><span class="line">实例：</span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><br/><h2 id="Markdown数学公式"><a href="#Markdown数学公式" class="headerlink" title="Markdown数学公式"></a>Markdown数学公式</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\int_0^1 &#123;x^2&#125; \,&#123;\rm d&#125;x</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\int_0^1 {x^2} ,{\rm d}x<br>$$</p><br/><h2 id="Markdown内嵌Html"><a href="#Markdown内嵌Html" class="headerlink" title="Markdown内嵌Html"></a>Markdown内嵌Html</h2><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可</p><h3 id="行级內联标签"><a href="#行级內联标签" class="headerlink" title="行级內联标签"></a>行级內联标签</h3><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</span><br></pre></td></tr></table></figure><p>渲染效果如下:</p><p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h3 id="区块标签"><a href="#区块标签" class="headerlink" title="#区块标签"></a><a href="https://markdown.com.cn/basic-syntax/htmls.html#%E5%8C%BA%E5%9D%97%E6%A0%87%E7%AD%BE">#</a>区块标签</h3><p>区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p><h3 id="HTML-用法最佳实践"><a href="#HTML-用法最佳实践" class="headerlink" title="#HTML 用法最佳实践"></a><a href="https://markdown.com.cn/basic-syntax/htmls.html#html-%E7%94%A8%E6%B3%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">#</a>HTML 用法最佳实践</h3><p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p><p>对于 HTML 的块级元素 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code> 和 <code>&lt;p&gt;</code>，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</p><p>在 HTML 块级标签内不能使用 Markdown 语法。例如 <code>&lt;p&gt;italic and **bold**&lt;/p&gt;</code> 将不起作用</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/weiran12123.github.io/2023/09/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/weiran12123.github.io/2023/09/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础配置"><a href="#Git基础配置" class="headerlink" title="Git基础配置"></a>Git基础配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 用户名,邮箱配置</span><br><span class="line">git config --global user.name &quot;Github用户名&quot;</span><br><span class="line">git cofnig --global user.email &quot;Github注册邮箱&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 生成ssh密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">到 C:\Users\admin\.ssh ， 复制 id_rsa.pub  内容粘贴到github，头像 settings 的 SSH and GPG key 中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 测试是否关联成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">显示</span><br><span class="line">Hi weiran12123! You&#x27;ve successfully authenticated, but GitHub does not provide shell access</span><br><span class="line">表示成功</span><br></pre></td></tr></table></figure><br/><h1 id="博客环境搭建"><a href="#博客环境搭建" class="headerlink" title="博客环境搭建"></a>博客环境搭建</h1><blockquote><p>Hexo官方指令大全：<a href="https://hexo.io/zh-cn/docs/commands.html">指令 | Hexo</a></p><p>Hexo基于node.js开发，因此需要安装npm和node.js</p><p>node.js传送门:<a href="https://nodejs.org/en">Node.js (nodejs.org)</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 查看node.js和npm版本，是否下载成功</span><br><span class="line">node -v</span><br><span class="line">npm -v </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 下载hexo命令接口 hexo-cli</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 初始化hexo页面</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">// </span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">// 创建第一篇博客</span><br><span class="line">hexo n &quot;第一篇测试博客&quot;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexo clean 表示清除本地缓存</span><br><span class="line">hexo s 表示可以到本地浏览</span><br><span class="line">hexo n 表示创建新文章</span><br><span class="line">hexo g 表示生成静态文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本地访问页面</span><br><span class="line">localhost:4000</span><br></pre></td></tr></table></figure><br/><h1 id="Hexo链接Github远程仓库"><a href="#Hexo链接Github远程仓库" class="headerlink" title="Hexo链接Github远程仓库"></a>Hexo链接Github远程仓库</h1><blockquote><p>文件目录解释:</p><p>public文件夹存储当前生成的前端首页</p><p>source存储了我们的博客源文件，例如我们刚刚创建的第一篇测试博客，就存储在_post文件夹下</p><p>theme文件夹存储了我们美化页面的方式，例如butterfly</p><p>config.yml是网页渲染的控制文件，修改文件达到设置，美化博客的目的</p></blockquote><p><img src="/weiran12123.github.io/./pic/pic.png" alt="alt 图片失效"></p><br/><h3 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h3><p>编辑config.yml文件</p><p>修改文件末尾为以下内容(以我的博客为例)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;git@github.com:weiran12123/weiran12123.github.io.git&#x27;</span><br><span class="line">  branch: main</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// 安装hexo-deployer-git组件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 尝试部署</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">浏览器输入username.github.io即可在公网访问</span><br></pre></td></tr></table></figure><br/><p> npm install hexo-deployer-git –save</p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><blockquote><p>博主使用的是Butterfly美化</p><p>官方butterfly教程:<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>Butterfly使用教程:<a href="https://blog.csdn.net/mjh1667002013/article/details/129290903?ops_request_misc=&request_id=&biz_id=102&utm_term=hexo">https://blog.csdn.net/mjh1667002013/article/details/129290903?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=hexo</a></p><p>Next使用教程:<a href="https://blog.csdn.net/qq_34003239/article/details/100883213">Next美化</a></p><p>Hexo框架各类主题传送门:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p><a href="https://www.izhaoo.com/2020/05/05/hexo-theme-zhaoo-doc/#%E5%85%B3%E4%BA%8E%E6%96%87%E6%A1%A3">主题配置文档 - zhaoo (izhaoo.com)</a></p><br/><h1 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 博客更新常用命令</span><br><span class="line"></span><br><span class="line">新建博文：hexo n &quot;博文标题&quot;</span><br><span class="line"></span><br><span class="line">更新博客状态：</span><br><span class="line">hexo clean# 清除缓存</span><br><span class="line">hexo g# hexo generate  # 生成静态网页</span><br><span class="line">hexo d# hexo deploy  # 部署</span><br><span class="line">hexo s# hexo server  #启动服务预览，本地运行查看效果</span><br></pre></td></tr></table></figure><h1 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h1><p>DNS域名解析教程:<a href="https://www.cnblogs.com/xieqk/p/Github-Page-DNS.html#:~:text=%E5%9F%9F%E5%90%8D">https://www.cnblogs.com/xieqk/p/Github-Page-DNS.html#:~:text=域名</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/weiran12123.github.io/2023/09/21/MongoDB/"/>
      <url>/weiran12123.github.io/2023/09/21/MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><br/><h2 id="MongoDB简述"><a href="#MongoDB简述" class="headerlink" title="MongoDB简述"></a>MongoDB简述</h2><blockquote><h2 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB ?"></a>什么是MongoDB ?</h2><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组</p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li><p>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</p></li><li><p>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName&#x3D;”Sameer”,Address&#x3D;”8 Gandhi Road”)来实现更快的排序。</p></li><li><p>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</p></li><li><p>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</p></li><li><p>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</p></li><li><p>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</p></li><li><p>Mongodb中的Map&#x2F;reduce主要是用来对数据进行批量处理和聚合操作。</p></li><li><p>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</p></li><li><p>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</p></li><li><p>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</p></li><li><p>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</p></li><li><p>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</p></li><li><p>MongoDB安装简单。</p></li></ul><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul><li>2007年10月，MongoDB由10gen团队所发展。2009年2月首度推出。</li><li>2012年05月23日，MongoDB2.1 开发分支发布了! 该版本采用全新架构，包含诸多增强。</li><li>2012年06月06日，MongoDB 2.0.6 发布，分布式文档数据库。</li><li>2013年04月23日，MongoDB 2.4.3 发布，此版本包括了一些性能优化，功能增强以及bug修复。</li><li>2013年08月20日，MongoDB 2.4.6 发布。</li><li>2013年11月01日，MongoDB 2.4.8 发布。</li><li>……</li></ul><h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><h3 id="数据库的使用规范"><a href="#数据库的使用规范" class="headerlink" title="数据库的使用规范"></a>数据库的使用规范</h3><ul><li>编码格式必须为UTF-8字符；</li><li>不可以出现空字符串，即””；</li><li>只能使用ASCII码表中的字母和数字，禁止使用除下划线（_）以外的特殊字符；</li><li>数据库名称区分大小写；</li><li>数据库名称长度限制为64个字节；</li><li>数据库名称不可与系统保留的数据库名称相同，即admin、local和config数据库</li></ul><h4 id="数据库命名的建议："><a href="#数据库命名的建议：" class="headerlink" title="数据库命名的建议："></a>数据库命名的建议：</h4><ul><li>数据库名称建议全部小写</li><li>建议不要使用数字开头的数据库名称</li><li>建议数据库命名规则为db_xxxx，即见名知意的名称</li></ul><h3 id="集合使用规范"><a href="#集合使用规范" class="headerlink" title="集合使用规范"></a>集合使用规范</h3><ul><li><p>集合是通过名字来标识区分。关于集合的命名需要注意以下几点：</p></li><li><p>编码格式必须为UTF-8字符；</p></li><li><p>不可以出现空字符串，即””；</p></li><li><p>集合命名不可含有\0字符，即空字符，这个字符表示集合名称的结尾；</p></li><li><p>不能出现以“System.”开头的集合名称，这-是为系统集合保留的前缀；</p></li><li><p>集合命名不可包含字符 “$”；</p></li><li><p>集合名称的长度限制为64个字节</p></li><li><p>基于上面MongoDB集合的命名规范，以及实际开发角度提出五条集合命名建议：</p></li><li><p>建议不要使用除 _（下划线）和 .（点）以外的特殊字符；</p></li><li><p>建议集合名称全部小写；</p></li><li><p>建议不要使用数字开头的集合名称；</p></li><li><p>为了避免库级锁带来的问题，尽量对写入较大的集合使用“单库单集合”的结构，对于新增业务尽量创建新库，而不是在现有库中创建新集合；</p></li><li><p>建议集合命名规则为t_xxxx；</p></li><li><p>使用“.”来分隔不同命名空间的子集合，例如一个博客可能包含两个子集合，即blog.posts和blog.authors，而blog本身可以不存在</p></li></ul><h3 id="文档使用规范"><a href="#文档使用规范" class="headerlink" title="文档使用规范"></a>文档使用规范</h3><ul><li>文档中键的类型一般是字符串类型，键可以使用任意UTF-8字符。关于文档的命名要注意以下几点：</li><li>文档中的键不能含有“\0”字符，即空字符；</li><li>文档中的键禁止使用任何除下划线“”以外的特殊字符，并且开头不建议使用””；</li><li>文档中的键建议全部为小写；</li><li>文档中的键不建议以数字开头；</li><li>不建议自定义文档中的“_id”值</li><li>尽量将相似的文档放在同一个集合中，将不同类型的文档分散在不同的集合中，这样可以提高索引的利用率；</li><li>建议不要存储过长的字符串，如果这个字段为查询条件，那么确保该字段的值不超过1KB，因为MongoDB索引仅支持1KB以内的字段；</li><li>建议若业务上对于存放数据大小写不敏感，则使用全部大写&#x2F;小写存放（或增加一个统一大小写的辅助字段）；</li><li>建议不要使用数组字段作为查询条件；</li><li>同意文档中，不可以存在相同名称的键；</li></ul><h2 id="The-Mongod概念"><a href="#The-Mongod概念" class="headerlink" title="The Mongod概念"></a>The Mongod概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>Mongod是MongoDB 的主要守护进程，是数据库的核心服务器，处理连接请求，持久化数据<br>守护进程<br>【旨在运行但不直接与之交互的程序或进程】<br>【守护进程通常在他们的名字后面附加一个D】<br>Mongod 包含我们可以用来使我们的数据库安全，分布式和一致的所有配置选项<br>Mongod 可以包含多个服务器</p></li><li><p>当我们启动mongod时，实际上是在启动一个新的数据库，但是我们不直接与mongod进程交互。我们使用数据库客户端【mongoshell】与mongod通信，我们向客户端发出命令，客户端负责与mongod通信以执行这些命令</p></li><li><p>如果我们的部署有多个服务器，我们可以根据需要配置我们的客户端</p></li><li><p>mongoShell 并不是我们连接到 mongod 的唯一方法<br>MongoDB Compass<br>Drivers(Node，Swift，Java，C&#x2F;C++，etc.)</p></li></ul><h2 id="MongoDB数据类型"><a href="#MongoDB数据类型" class="headerlink" title="MongoDB数据类型"></a>MongoDB数据类型</h2><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">String</td><td align="left">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td align="left">Integer</td><td align="left">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td align="left">Boolean</td><td align="left">布尔值。用于存储布尔值（真&#x2F;假）。</td></tr><tr><td align="left">Double</td><td align="left">双精度浮点值。用于存储浮点值。</td></tr><tr><td align="left">Min&#x2F;Max keys</td><td align="left">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td align="left">Arrays</td><td align="left">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td align="left">Timestamp</td><td align="left">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td align="left">Object</td><td align="left">用于内嵌文档。</td></tr><tr><td align="left">Null</td><td align="left">用于创建空值。</td></tr><tr><td align="left">Symbol</td><td align="left">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td align="left">Date</td><td align="left">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td align="left">Object ID</td><td align="left">对象 ID。用于创建文档的 ID。</td></tr><tr><td align="left">Binary Data</td><td align="left">二进制数据。用于存储二进制数据。</td></tr><tr><td align="left">Code</td><td align="left">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td align="left">Regular expression</td><td align="left">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h2 id="Mysql和MongoDB对比"><a href="#Mysql和MongoDB对比" class="headerlink" title="Mysql和MongoDB对比"></a>Mysql和MongoDB对比</h2><table><thead><tr><th align="left">SQL术语&#x2F;概念</th><th align="left">MongoDB术语&#x2F;概念</th><th align="left">解释&#x2F;说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">数据库表&#x2F;集合</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">数据记录行&#x2F;文档</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">数据字段&#x2F;域</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">table joins</td><td align="left"></td><td align="left">表连接,MongoDB不支持</td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table></blockquote><br/><h2 id="Mongodb部署"><a href="#Mongodb部署" class="headerlink" title="Mongodb部署"></a>Mongodb部署</h2><p><a href="https://juejin.cn/post/7163684333616644103">MongoDB 6.x 在 Windows 和 Linux 下的安装教程（详细） - 掘金 (juejin.cn)</a></p><br/><h3 id="Window版本"><a href="#Window版本" class="headerlink" title="Window版本"></a>Window版本</h3><h4 id="Mongodb安装包下载"><a href="#Mongodb安装包下载" class="headerlink" title="Mongodb安装包下载"></a>Mongodb安装包下载</h4><blockquote><p>Mongodb软件百度网盘链接</p><p>链接：<a href="https://pan.baidu.com/s/1H0RRbHpDkhBrr0QYXLtzVw">https://pan.baidu.com/s/1H0RRbHpDkhBrr0QYXLtzVw</a><br>提取码：69x7</p></blockquote><h4 id="Mongodb环境配置"><a href="#Mongodb环境配置" class="headerlink" title="Mongodb环境配置"></a>Mongodb环境配置</h4><blockquote><p>将C:\Program Files\MongoDB\Server\4.0\bin配置到path路径</p><img src="/pic/Pr/mongod配置.png" alt="image-20230914130906997" style="zoom:50%;" /></blockquote><h4 id="进入mongodb"><a href="#进入mongodb" class="headerlink" title="进入mongodb"></a>进入mongodb</h4><blockquote><p>打开cmd输入mongo</p><p>输入show dbs 查看数据库</p></blockquote><br/><h3 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本"></a>Linux版本</h3><blockquote><p>目录 mongodb官方给出表示： 在<strong>mongodb4.5</strong>的版本中逐渐弃用mongo的shell命令来连接 数据库 ，改用mongosh，在6版本中已经完全弃用mongo这个shell命令</p></blockquote><h4 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h4><p>MongoDB 安装包下载地址:</p><p><a href="https://www.mongodb.com/try/download/community">Download MongoDB Community Server | MongoDB</a></p><p>MongoDB Shell下载地址:</p><p><a href="https://www.mongodb.com/try/download/shell">MongoDB Shell Download | MongoDB</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 解压mongodb压缩包</span><br><span class="line">sudo tar -zxvf mongodb-linux-x86_64-rhel70-7.0.1</span><br><span class="line"></span><br><span class="line"># 改名</span><br><span class="line">sudo mv mongodb-linux-x86_64-rhel70-7.0.1 mongodb</span><br><span class="line"></span><br><span class="line"># 下载 mongodb shell</span><br><span class="line">sudo wget https://downloads.mongodb.com/compass/mongosh-1.6.0-linux-x64.tgz</span><br><span class="line"></span><br><span class="line"># 解压mongodbshell压缩包</span><br><span class="line">sudo tar -zfx mongosh-1.6.0-linux-x64.tgz </span><br><span class="line"></span><br><span class="line"># 改名</span><br><span class="line">sudo mv mongosh-1.6.0-linux-x64 mongoshell</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 配置内容</span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br><span class="line">export PATH=/usr/local/mongoshell/bin:$PATH</span><br><span class="line"></span><br><span class="line"># 使配置重新生效</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 指定路径</span><br><span class="line">mongod --fork --dbpath=/data/mongodb/data --logpath=/data/mongodb/log/mongo.log</span><br><span class="line"></span><br><span class="line">--fork：将 MongoDB 服务作为后台服务启动</span><br><span class="line">--dbpath：指定存放 MongoDB 数据的目录，启动服务时必须指定</span><br><span class="line">--logpath：指定存放 MongoDB 日志的目录，可选，若是启动时指定了，则不会在终端中打印日志而是直接输出到日志文件中</span><br></pre></td></tr></table></figure><br/><h2 id="MongoDB操作"><a href="#MongoDB操作" class="headerlink" title="MongoDB操作"></a>MongoDB操作</h2><p><a href="https://blog.csdn.net/weixin_44929998/article/details/127924301">二、MongoDB简介及基本操作_童懵的博客-CSDN博客</a></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASES_NAME</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dbname.insert(&#123;&quot;name&quot;:&quot;张三&quot;&#125;)</span><br></pre></td></tr></table></figure><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看全部数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"># 查看当前数据库</span><br><span class="line">db</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 显式创建集合</span><br><span class="line">db.createCollection(&quot;collecction_name&quot;, options)</span><br><span class="line"></span><br><span class="line">// 隐式创建集合</span><br><span class="line">db.collection.insert(document)</span><br><span class="line"></span><br><span class="line">collection_name: 要创建的集合名称</span><br><span class="line">options: 可选参数, 指定有关内存大小及索引的选项</span><br></pre></td></tr></table></figure><h4 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.drop()</span><br></pre></td></tr></table></figure><p>​</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><blockquote><ul><li>insert()和save()方法的区别在于，若使用insert()方法插入文档时，集合中已存在该文档，则会报错。若使用save()方法插入文档时，集合中已存在该文档，则会覆盖</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 单文档插入</span><br><span class="line">db.collection.insert(&#123;&quot;name&quot;:&quot;小明&quot;&#125;)</span><br><span class="line">db.collection.save(document)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 多文档插入</span><br><span class="line">db.collection.insertMany([document1,document2,document3...])</span><br><span class="line">db.collectino.insertMany([&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;小红&quot;，&quot;age&quot;:19&#125;])</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><blockquote><p>update() 方法用于更新已存在的文档。语法格式如下:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection_name.update(query,objNew,&#123;upsert:&lt;boolean&gt;multi:&lt;boolean&gt;writeConcern:&lt;documente&gt;&#125;)</span><br><span class="line"></span><br><span class="line">db.col.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">query : update的查询条件，类似sql update查询内where后面的。</span><br><span class="line">objNew : 更新的对象和操作符，类似sql中的set</span><br><span class="line">upsert : 可选，不存在更新对象时，是否插入，默认为false</span><br><span class="line">multi : 可选，默认为false，只更新查找到的第一个文档，反之更新所有</span><br><span class="line">writeConcern :可选，抛出异常的级别</span><br></pre></td></tr></table></figure><blockquote><p>save() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.save(</span><br><span class="line">&lt;document&gt;,</span><br><span class="line">&#123;</span><br><span class="line">writeConcern:&lt;document&gt;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">document : 文档数据。</span><br><span class="line">writeConcern :可选，抛出异常的级别</span><br></pre></td></tr></table></figure><h4 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 删除单个文档</span><br><span class="line">db.collectionName.remove(&#123;query,justOne: 1,writeConcern:document&#125;)</span><br><span class="line"></span><br><span class="line">db.collectionName.remove(&#123;&quot;name&quot;:&quot;小明&quot;，&quot;age&quot;:18&#125;,1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 删除全部文档</span><br><span class="line">db.collectionName.remove(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">query :（可选）删除的文档的条件。</span><br><span class="line">justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</span><br><span class="line">writeConcern :（可选）抛出异常的级别。</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 查询所有文档</span><br><span class="line">db.documentName.find()</span><br><span class="line"></span><br><span class="line">// 查询所有文档，以易读的方式查询</span><br><span class="line">db.documentName.find().pretty()</span><br><span class="line"></span><br><span class="line">// 按条件查询文档</span><br><span class="line">1.于操作符$and</span><br><span class="line">db.documentname.find(&#123;$and:[&#123;key1:value1,key2:value2&#125;]&#125;).pretty()</span><br><span class="line"></span><br><span class="line">2.或操作符$or</span><br><span class="line">db.documentname.find(&#123;$or:[&#123;key1:value1,key2:value2&#125;]&#125;).pretty()</span><br><span class="line"></span><br><span class="line">3.大于操作符$gt</span><br><span class="line">db.documentname.find(&#123;key:&#123;$gt:value&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">4.小于操作符$lt</span><br><span class="line">db.documentname.find(&#123;key:&#123;$lt:value&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">5.大于等于操作符$gte</span><br><span class="line">db.documentname.find(&#123;key:&#123;$gte:value&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">6.小于等于操作符$lte</span><br><span class="line">db.documentname.find(&#123;key:&#123;$lte:value&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">7.不等于操作符$ne</span><br><span class="line">db.documentname.find(&#123;key:&#123;$ne:value&#125;&#125;&#125;).pretty</span><br><span class="line"></span><br><span class="line">8.包含操作符</span><br><span class="line">db.documentname.find(&#123;key:&#123;$in:&#123;key:value&#125;&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">9.不包含操作符$nin</span><br><span class="line">db.documentname.find(&#123;key:&#123;$nin:&#123;key:value&#125;&#125;&#125;).pretty()</span><br><span class="line"></span><br><span class="line">// 按特定类型查询文档</span><br><span class="line">1.null类型查询,用于查询集合中字段值为null的文档</span><br><span class="line">db.collectionname.find(&#123;key:null).pretty()</span><br><span class="line"></span><br><span class="line">2.正则表达式查询,用于查询集合中符合某个规范的文档</span><br><span class="line">db.collectionname.find(&#123;key:/正则表达式/&#125;).pretty()</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><blockquote><ul><li>聚合管道操作是将文档在一个管道处理完毕后，把处理的结果传递给下一个管道进行再次处理。聚合管道是使用不同的管道阶段操作器进行不同聚合操作，管道阶段操作器也可称为管道操作符，常见管道操作符如下表</li></ul></blockquote><p>聚合管道操作</p><table><thead><tr><th>常见管道操作符</th><th>相关说明</th></tr></thead><tbody><tr><td>$group</td><td>将集合中的文档进行分组，便于后续统计结果</td></tr><tr><td>$limit</td><td>用于限制MongDB聚合管道返回文档数</td></tr><tr><td>$match</td><td>用于过滤数据，只输出符合条件的文档</td></tr><tr><td>$project</td><td>用于修改输入文档的结构(增加，删除字段等)和名称</td></tr><tr><td>$skip</td><td>在聚合管道中跳过指定数量的文档，并返回剩余的文档</td></tr></tbody></table><p>Map-Reduce操作</p><br/><h3 id="使用索引优化查询"><a href="#使用索引优化查询" class="headerlink" title="使用索引优化查询"></a>使用索引优化查询</h3><p>索引概述</p><p>索引操作</p><br/><h3 id="使用Java操作MongoDB"><a href="#使用Java操作MongoDB" class="headerlink" title="使用Java操作MongoDB"></a>使用Java操作MongoDB</h3><p>搭建Java环境</p><p>基于Java API操作MongoDB</p><br/><h3 id="使用Python操作MongoDB"><a href="#使用Python操作MongoDB" class="headerlink" title="使用Python操作MongoDB"></a>使用Python操作MongoDB</h3><p>搭建Python环境</p><p>基于Python API操作MongoDB</p><br/><h3 id="使用Robo-3T操作MongoDB"><a href="#使用Robo-3T操作MongoDB" class="headerlink" title="使用Robo 3T操作MongoDB"></a>使用Robo 3T操作MongoDB</h3><p>Robo 3T工具的下载安装</p><p>基于Robo 3T操作MongoDB</p><br/><h3 id="安全与访问控制"><a href="#安全与访问控制" class="headerlink" title="安全与访问控制"></a>安全与访问控制</h3><p>用户访问控制</p><p>用户管理操作</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scalc</title>
      <link href="/weiran12123.github.io/2023/09/04/Scala/"/>
      <url>/weiran12123.github.io/2023/09/04/Scala/</url>
      
        <content type="html"><![CDATA[<h1 id="Scala概述"><a href="#Scala概述" class="headerlink" title="Scala概述"></a>Scala概述</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>&ensp;&ensp;Scala是一种通用的编程语言。它是由Martin Odersky创建和开发的。 Martin于2001年开始在洛桑联邦理工学院(EPFL)从事Scala的研究。它于 2004年1月20日正式发布。 </p><p>&ensp;&ensp;马丁·奥德斯基是编译器及编程的狂热爱好者，长时间的编程之后，希望 发明一种语言，能够让写程序这样的基础工作变得高效，简单。所以当接 触到JAVA语言后，对JAVA这门便携式，运行在网络，且存在垃圾回收的 语言产生了极大的兴趣，所以决定将函数式编程语言的特点融合到JAVA 中，由此发明了 两种语言 (Pizza &amp; Scala)。 </p><p>&ensp;&ensp;Pizza和Scala极大地推动了Java编程语言的发展。 </p><ul><li>JDK5.0 的泛型、增强for循环、自动类型转换等，都是从Pizza引入的新特性 </li><li>JDK8.0 的类型推断、Lambda表达式就是从Scala引入的特性。 </li><li>JDK5.0和JDK8.0的编辑器就是马丁·奥德斯基写的，因此马丁·奥德斯基一个人 的战斗力抵得上一个Java开发团队。</li></ul><ol><li><p>Scala源自Java </p><ul><li>Scala构建在JVM之上 </li><li>Scala与Java兼容、互通</li></ul></li><li><p>Scala的优势 </p><ul><li>多范式编程：面向对象编程、函数式编程 </li><li>表达能力强，代码精简</li></ul></li><li><p>大数据与Scala </p><ul><li>Spark采用Scala语言设计 <ul><li>提供的API更加优雅 </li><li>基于JVM的语言更融入Hadoop生态圈</li></ul></li></ul></li><li><p>spark的兴起，带动了scala的发展</p></li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>面向对象特性</p><ul><li>每个值都是对象</li><li>对象的数据类型和行为由类（Class）和特征（Trait，类似于interface）描述</li><li>利用特征实现混入式多重继承</li></ul></li><li><p>函数式编程</p><ul><li><p>每个函数都是一个值</p></li><li><p>支持高阶函数、柯里化(currying)、样例类（case class）及模式匹配</p></li></ul></li><li><p>Scala是静态类型语言 </p></li><li><p>扩展性</p></li></ol><h1 id="Scala部署"><a href="#Scala部署" class="headerlink" title="Scala部署"></a>Scala部署</h1><h2 id="Window版本"><a href="#Window版本" class="headerlink" title="Window版本"></a>Window版本</h2><p>Step1.下载安装包</p><p>[Scala下载地址]<a href="https://www.scala-lang.org/download/">Install | The Scala Programming Language (scala-lang.org)</a></p><p><img src="/weiran12123.github.io/pic/Scala/scala1.png" alt="Scala文件"></p><p>Step2.安装JDK</p><p>Step3.安装Scala插件</p><p><img src="/weiran12123.github.io/pic/Scala/scala2.png" alt="Scala插件安装"></p><h2 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本"></a>Linux版本</h2><p>step1:安装jdk</p><p>jdk下载地址：<a href="https://www.oracle.com/cn/java/technologies/downloads/">https://www.oracle.com/cn/java/technologies/downloads/</a></p><p>百度网盘下载:</p><p>链接：<a href="https://pan.baidu.com/s/1H3o2BfQWHcjPXCAVz3syHg">https://pan.baidu.com/s/1H3o2BfQWHcjPXCAVz3syHg</a><br>提取码：qx5v</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib</span><br><span class="line"></span><br><span class="line">sudo mkdir jvm</span><br><span class="line"></span><br><span class="line">sudo tar -zxvf ./jdk-8u371-linux-x64.tar.gz -C /usr/lib/jvm</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>step2:Scala安装包准备</p><p><a href="https://www.scala-lang.org/download/">安装 |Scala编程语言 (scala-lang.org)</a></p><p>step3:配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">#scala</span><br><span class="line">export SCALA_HOME=/usr/local/scala-2.13.0</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure><h1 id="Scala数据类型"><a href="#Scala数据类型" class="headerlink" title="Scala数据类型"></a>Scala数据类型</h1><h2 id="Scala变量与常量"><a href="#Scala变量与常量" class="headerlink" title="Scala变量与常量"></a>Scala变量与常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p># 赋值后可以改变，生命周期中可以被多次赋值</p><p>var 变量名称:类型 &#x3D; 值</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p># 赋值后不可变，类似于Java中的final变量</p><p>val 常量名称:类型 &#x3D; 值</p><p>变量案例</p><p><img src="/weiran12123.github.io/pic/Scala/scala3.png" alt="图片失效"></p><p>常量案例</p><p><img src="/weiran12123.github.io/pic/Scala/scala4.png" alt="图片失效"></p><p>从图片中可以看出常量类型不可变，会报错</p><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><h3 id="type关键字"><a href="#type关键字" class="headerlink" title="type关键字"></a>type关键字</h3><p>&ensp;&ensp;type 类型别名 &#x3D; 类型</p><p>案例</p><p><img src="/weiran12123.github.io/pic/Scala/scala5.png.png" alt="image-20230904173414655"></p><p><img src="/weiran12123.github.io/pic/Scala/scala6.png" alt="image-20230904173421547"></p><h2 id="Scala数据类型层次结构"><a href="#Scala数据类型层次结构" class="headerlink" title="Scala数据类型层次结构"></a>Scala数据类型层次结构</h2><p><img src="/weiran12123.github.io/pic/Scala/scala7.png" alt="图片失效"></p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Byte-128到1278位符号补码整数</span><br><span class="line">short-32768到3276716位符号补码整数</span><br><span class="line">int-2147483648到2147483647 32位符号补码整数</span><br><span class="line">long-9223372036854775808到9223372036854775807   64位符号补码整数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 正确</span><br><span class="line">var n1:Byte = 127</span><br><span class="line">var n2:Byte = -128</span><br><span class="line"></span><br><span class="line">// 错误</span><br><span class="line">// var n3:Byte = 128</span><br><span class="line">// var </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 正确</span><br><span class="line">var n1:Byte = 127</span><br><span class="line">var n2:Byte = -128</span><br><span class="line"></span><br><span class="line">// 错误</span><br><span class="line">// var n3:Byte = 128</span><br><span class="line">// var n4:Byte = -129</span><br><span class="line">//Scala的整型，默认为Int型，声明Long型，须后加‘l’或‘L’</span><br><span class="line">var n6 = 9223372036854775807L</span><br><span class="line">//Scala程序中变量常声明为Int型，除非不足以表示大数，才使用Long</span><br></pre></td></tr></table></figure><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float32位,IEEE754标准单精度浮点数</span><br><span class="line">double64位,IEEE754标准双精度浮点数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Scala的浮点型常量默认为Double型，声明Float型常量，须后加‘f’或‘F’</span><br><span class="line">// 建议在开发中需要高精度小数时，请选择Double</span><br><span class="line">var n7 = 2.2345678912f</span><br><span class="line">var n8 = 2.2345678912</span><br><span class="line">println(&quot;n7=&quot; + n7)</span><br><span class="line">println(&quot;n8=&quot; + n8)</span><br></pre></td></tr></table></figure><h2 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h2><blockquote><p>字符类型可以表示单个字符，字符类型是Char</p><blockquote><ol><li>字符常量是用单引号 ‘ ‘ 括起来的单个字符</li><li>\t ：一个制表位，实现对齐的功能</li><li>\n ：换行符</li><li>\ ：表示\</li><li>&quot; ：表示</li></ol></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">案例:</span><br><span class="line">//（1）字符常量是用单引号 &#x27; &#x27; 括起来的单个字符。</span><br><span class="line">var c1: Char = &#x27;a&#x27; println(&quot;c1=&quot; + c1)</span><br><span class="line">//注意：这里涉及自动类型提升，其实编译器可以自定判断是否超出范围，不过idea提示报错</span><br><span class="line">var c2:Char = &#x27;a&#x27; + 1</span><br><span class="line">println(c2)</span><br><span class="line">//（2）\t ：一个制表位，实现对齐的功能</span><br><span class="line">println(&quot;姓名\t年龄&quot;)</span><br><span class="line">//（3）\n ：换行符</span><br><span class="line">println(&quot;西门庆\n潘金莲&quot;)</span><br></pre></td></tr></table></figure><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><blockquote><p>布尔类型也叫Boolean类型。</p><blockquote><p>Booolean类型数据只允许取值true和false</p><p>boolean类型占1个字节</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">案例:</span><br><span class="line">var isResult : Boolean = false</span><br><span class="line">var isResult2 : Boolean = t</span><br></pre></td></tr></table></figure><h2 id="Unit类型，Null类型，Nothing类型"><a href="#Unit类型，Null类型，Nothing类型" class="headerlink" title="Unit类型，Null类型，Nothing类型"></a>Unit类型，Null类型，Nothing类型</h2><table><thead><tr><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Unit</td><td align="center">表示无值，和其他语言中的void相同。作用不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()</td></tr><tr><td align="center">Null</td><td align="center">null,Null类型只有一个实例值null</td></tr><tr><td align="center">Nothing</td><td align="center">Nothing类型在Scala的类层级最低端;他是任何其他类型的子类型。当一个函数，我们确定没有正常的返回值，可以用Nothing来指定返回类型,这样有一个好处，就是我们可以把返回的值(异常)赋给其它的函数或者变量(兼容性)</td></tr></tbody></table><blockquote><p>Unit类型用来标识过程，也就是没有明确返回值的函数</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Unit类型用来标识过程，也就是没有明确返回值的函数。</span><br><span class="line">//Unit类似于Java里的void。Unit只有一个实例——( )，这个实例也没有实质意义</span><br><span class="line">def sayOk : Unit = &#123;// unit表示没有返回值，即void</span><br><span class="line">&#125;</span><br><span class="line">println(sayOk)</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>Null类只有一个实例对象</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Null类似于Java中的null引用。</span><br><span class="line">//Null可以赋值给任意引用类型（AnyRef），但是不能赋值给值类型（AnyVal）</span><br><span class="line">var cat = new Cat();</span><br><span class="line">cat = null // 正确</span><br><span class="line">var n1: Int = null // 错误</span><br><span class="line">println(&quot;n1:&quot; + n1)</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>Nothing，是所有类型的子类型，它表示不可实例化的值</p><blockquote><p>Nothing类型主要用于描述不正常的终止和异常处理。例如，当我们需要一个函数永远 不会返回时，可以将该函数的返回类型声明为Nothing类型。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//非常直观的告诉你这个方法不会正常返回</span><br><span class="line">def test() : Nothing=&#123;</span><br><span class="line">throw new Exception()</span><br><span class="line">&#125;</span><br><span class="line">test</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><h1 id="Scala-简单功能"><a href="#Scala-简单功能" class="headerlink" title="Scala 简单功能"></a>Scala 简单功能</h1><h2 id="键盘键入"><a href="#键盘键入" class="headerlink" title="键盘键入"></a>键盘键入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package day02</span><br><span class="line"></span><br><span class="line">import scala.io.StdIn</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 测试Scala键盘键入</span><br><span class="line">* */</span><br><span class="line">object chap1 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    // 接受键盘的输入</span><br><span class="line">    println(&quot;请输入你的姓名:&quot;)</span><br><span class="line">    var name:String = StdIn.readLine()</span><br><span class="line">    println(&quot;你的姓名是:&quot;+name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动类型装换"><a href="#自动类型装换" class="headerlink" title="自动类型装换"></a>自动类型装换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 自动提升原则，精度低的向精度高的转换</span><br><span class="line">int1 = 145</span><br><span class="line">byte1 = 112</span><br><span class="line">val result = int1 + byte1</span><br><span class="line">println(result.getClass)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">byte1 = int1 // 报错</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// (byte.short)和char不会自动转换</span><br><span class="line">var byte2:Byte = 123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte，short，char运算的时候，自动转换int</span><br></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">String类型转基本数值类型（语法：s1.toInt、s1.toFloat、s1.toDouble、s1.toByte、s1.toLong、s1.toShort）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">基本类型转String类型（语法：将基本类型的值+&quot;&quot; 即可）</span><br><span class="line"></span><br><span class="line">        var str1 : String = true + &quot;&quot;</span><br><span class="line"></span><br><span class="line">        var str2 : String = 4.5 + &quot;&quot;</span><br><span class="line"></span><br><span class="line">        var str3 : String = 100 +&quot;&quot;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">String类型转基本数值类型（语法：调用相关API）</span><br><span class="line"></span><br><span class="line">        var s1 : String = &quot;12&quot;</span><br><span class="line"></span><br><span class="line">        var n1 : Byte = s1.toByte</span><br><span class="line"></span><br><span class="line">        var n2 : Short = s1.toShort</span><br><span class="line"></span><br><span class="line">        var n3 : Int = s1.toInt</span><br><span class="line"></span><br><span class="line">        var n4 : Long = s1.toLong</span><br></pre></td></tr></table></figure><h1 id="Scala条件循环控制"><a href="#Scala条件循环控制" class="headerlink" title="Scala条件循环控制"></a>Scala条件循环控制</h1><h2 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h2><p>if表达式的定义：scala中，表达式是有值的，就是if或者else中最后一行语句返 回的值（和java区别）</p><p>if表达式类型推断</p><ul><li><p>表达式有值的，如果if返回值类型和else返回值类型不同时，scala会自动推断，取两<br>个类型的公共父类型（Any是Int 和String的父类型）；</p></li><li><p>If后面没有跟else，则默认else的值为Unit，也用（）表示，类似于java中的void和<br>null</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if格式:</span><br><span class="line"></span><br><span class="line">if (条件表达式1) &#123;</span><br><span class="line">执行代码块1</span><br><span class="line">&#125;</span><br><span class="line">else if (条件表达式2) &#123;</span><br><span class="line">执行代码块2</span><br><span class="line">&#125; ……</span><br><span class="line">else &#123;</span><br><span class="line">执行代码块n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">案例:cmd中</span><br><span class="line">scala&gt; var score=100</span><br><span class="line">score: Int = 100</span><br><span class="line">scala&gt; if (score&gt;60) 1 else 0</span><br><span class="line">res0: Int =1</span><br><span class="line">scala&gt; if (score&gt;60) hege=1 else hege =0</span><br><span class="line">scala&gt; hege</span><br><span class="line">res2: Int =1</span><br><span class="line">scala&gt; if(score&gt;60) “合格” else 0</span><br><span class="line">res3: Any = 合格</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">案例:idea中</span><br><span class="line">object Test &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    var score:Int=60</span><br><span class="line">    if(score&gt;=60&amp;&amp;score&lt;=100)&#123;</span><br><span class="line">      println(&quot;及格&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    else if(score&lt;60)&#123;</span><br><span class="line">      println(&quot;不及格&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      println(&quot;分数不合理&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语句终结符号，块表达式"><a href="#语句终结符号，块表达式" class="headerlink" title="语句终结符号，块表达式"></a>语句终结符号，块表达式</h2><p>默认情况下，scala不需要语句终结符，默认每行作为一个语句. </p><p>一行放多条语句，使用花括弧 ｛｝</p><ul><li>如果一行放多个语句必须使用语句终结符，通常来说，对于多行语句，还是会使用花<br>括号的方式.</li></ul><p>块表达式：块表达式，值的就是{ }中的值，其中包含多条语句，最后一个语句的<br>值就是块表达式的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">默认每行作为一个语句</span><br><span class="line">scala&gt; var x,y,z=0</span><br><span class="line">x: Int =0</span><br><span class="line">y: Int =0</span><br><span class="line">z: Int =0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一行放多条语句，需要使用语句终结符</span><br><span class="line">scala&gt; if(x&lt;1) &#123; y=y+1; z=z+1&#125;</span><br><span class="line">scala&gt; y</span><br><span class="line">res11: Int =1</span><br><span class="line">scala&gt; z</span><br><span class="line">res12: Int =1</span><br></pre></td></tr></table></figure><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><p>print和println：print打印时不加换行符，println打印时会加一个换行符</p><p>printtf:可以用于格式化，相当于占位符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; print(“hello”)</span><br><span class="line">hello</span><br><span class="line">scala&gt; println(“hello”)</span><br><span class="line">hello</span><br><span class="line">scala&gt; printf(“Hello, my name is %s”,”miss li”)</span><br><span class="line">Hello, my name is miss li</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while (循环条件) &#123;</span><br><span class="line">循环体(语句)</span><br><span class="line">循环变量迭代</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var num: Int = 0</span><br><span class="line">while ( num &lt; 100 ) &#123;</span><br><span class="line">println( num )</span><br><span class="line">num = num + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">循环体(语句)</span><br><span class="line">循环变量迭代</span><br><span class="line">&#125; while(循环条件)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var num: Int = 0</span><br><span class="line">do &#123;</span><br><span class="line">println( num )</span><br><span class="line">num = num + 5</span><br><span class="line">&#125; while ( num &lt; 200 )</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&quot;i to j&quot; 或者 &quot;i until j&quot;表示创建一个区间</span><br><span class="line">i until j,前闭后开</span><br><span class="line">i to j,前后闭合</span><br><span class="line">object Test &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val num: Int = 10</span><br><span class="line">    for (i: Int &lt;- 1 to num) &#123;</span><br><span class="line">      println(i * 100)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object Test &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val num: Int</span><br><span class="line">    = 10</span><br><span class="line">    for (i: Int &lt;-1 until  num) &#123;</span><br><span class="line">      println(i * 100)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">100</span><br><span class="line">200</span><br><span class="line">300</span><br><span class="line">400</span><br><span class="line">500</span><br><span class="line">600</span><br><span class="line">700</span><br><span class="line">800</span><br><span class="line">900</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><h4 id="倒序打印"><a href="#倒序打印" class="headerlink" title="倒序打印"></a>倒序打印</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i&lt;- 1 to 10 reverse)&#123;</span><br><span class="line">println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环返回值"><a href="#for循环返回值" class="headerlink" title="for循环返回值"></a>for循环返回值</h4><p>for 循环中的 yield 会把当前的元素记下来，保存在集合中，循环结束后将返回该集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val num:Int = 10</span><br><span class="line">var retVal=for ( i: Int &lt;- 1 to num; if i%2==0;if i&gt;5 ) yield i;</span><br><span class="line">for(a &lt;- retVal)&#123;</span><br><span class="line">print(a +“ ”)</span><br><span class="line">&#125;</span><br><span class="line">//输出 6 8 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for循环使用yield</span><br><span class="line">将具有返回值</span><br></pre></td></tr></table></figure><h4 id="for循环步长"><a href="#for循环步长" class="headerlink" title="for循环步长"></a>for循环步长</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i&lt;- 1 to 100 by 4)&#123;</span><br><span class="line">println(&quot;今年&quot;+i+&quot;岁&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i&lt;- 1 to 5;j&lt;- 1 to 3)&#123;</span><br><span class="line">println(i+&quot;*&quot;+j+&quot;=&quot;+i*j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环守卫"><a href="#for循环守卫" class="headerlink" title="for循环守卫"></a>for循环守卫</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i &lt;- 1 to 100 if i%2!=0)&#123;</span><br><span class="line">println(i + &quot; &quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h2><p>Scala内置控制结构特地去掉了break和continue，是为了更好的适应函数式编程，推 荐使用函数式的风格解决break和continue的功能，而不是一个关键字。Scala中使用 breakable控制结构来实现break和continue功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//采用Scala自带的函数，退出循环</span><br><span class="line">import scala.util.control.Breaks</span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">Breaks.breakable(</span><br><span class="line">    for (elem &lt;- 1 to 10) &#123;</span><br><span class="line">    println(elem)</span><br><span class="line">    if (elem == 5) Breaks.break()</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    println(&quot;正常结束循环&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">中断-对break进行省略</span><br><span class="line">import scala.util.control.Breaks._</span><br><span class="line"></span><br><span class="line">object TestBreak &#123;</span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">breakable &#123;</span><br><span class="line">for (elem &lt;- 1 to 10) &#123;</span><br><span class="line">println(elem)</span><br><span class="line">if (elem == 5) break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println(&quot;正常结束循环&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">continue</span><br><span class="line">object TestContinue &#123;</span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">//循环遍历10以内的所有数据，奇数打印，偶数跳过</span><br><span class="line">for (elem &lt;- 1 to 10) &#123;</span><br><span class="line">if (elem % 2 == 1) &#123;</span><br><span class="line">println(elem)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">println(&quot;continue&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环过滤"><a href="#循环过滤" class="headerlink" title="循环过滤"></a>循环过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">就是for循环个if配合使用</span><br><span class="line">val num:Int = 10</span><br><span class="line">var retVal=for ( i: Int &lt;- 1 to num; if i%2==0;if i&gt;5 ) yield i;</span><br><span class="line">for(a &lt;- retVal)&#123;</span><br><span class="line">print(a +“ ”)</span><br><span class="line">&#125;</span><br><span class="line">//输出 6 8 10</span><br></pre></td></tr></table></figure><h1 id="Scala函数式编程"><a href="#Scala函数式编程" class="headerlink" title="Scala函数式编程"></a>Scala函数式编程</h1><h2 id="Scala函数概述"><a href="#Scala函数概述" class="headerlink" title="Scala函数概述"></a>Scala函数概述</h2><blockquote><ol><li>函数式编程是一种编程范式。</li><li>函数式编程主要思想，是将问题分解成一个一个的步骤，将每个步骤进行封装（函数），通过调用这些封装好的步骤，解决问题。</li><li>函数式编程的核心思想<ul><li>函数是“第一等公民”<ul><li>所谓“第一等公民”,指的是函数与其他数据类型一样，处于平等地位。</li><li>函数可以赋值给其他变量，也可以作为参数,传入另一个函数,或者作为别的函数的返回值。</li></ul></li><li>只用表达式，不用语句<ul><li>表达式是一个单纯的运算过程，总是有返回值；而语句是执行某种操作，没有返回值</li><li>函数式编程要求，只使用表达式，不使用语句。</li><li>也就是说，每一步都是单纯的运算，而且都有返回值</li></ul></li></ul></li></ol></blockquote><h2 id="函数语法结构"><a href="#函数语法结构" class="headerlink" title="函数语法结构"></a>函数语法结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 函数是Scala的核心</span><br><span class="line">// 函数定义</span><br><span class="line">def 函数名([参数列表]):返回值=(</span><br><span class="line">函数体</span><br><span class="line">return 表达式// return 可省略</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 函数调用</span><br><span class="line">函数名(参数列表)</span><br></pre></td></tr></table></figure><h2 id="Scala函数和方法的区别"><a href="#Scala函数和方法的区别" class="headerlink" title="Scala函数和方法的区别"></a>Scala函数和方法的区别</h2><blockquote><ol><li><p>函数和方法的区别</p><ul><li>为完成某一功能的程序语句的集合，称为函数；</li><li>类中的函数称之方法。</li><li>函数没有重载和重写的概念；</li><li>方法可以进行重载和重写。</li><li>Scala中函数可以嵌套定义</li></ul></li><li><p>注意：</p><ul><li><p>Scala语言可以在任何的语法结构中声明任何的语法。</p><p>例如：导入包，声明函数等</p></li></ul></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">// 函数1：无参，无返回值</span><br><span class="line">def test1(): Unit =&#123;</span><br><span class="line">println(&quot;无参，无返回值&quot;)</span><br><span class="line">&#125;</span><br><span class="line">test1()</span><br><span class="line">// 函数2：无参，有返回值</span><br><span class="line">def test2():String=&#123;</span><br><span class="line">return &quot;无参，有返回值&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(test2())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ef main(args: Array[String]): Unit = &#123;</span><br><span class="line">// 函数1：无参，无返回值</span><br><span class="line">def test1(): Unit =&#123;</span><br><span class="line">println(&quot;无参，无返回值&quot;)</span><br><span class="line">&#125;</span><br><span class="line">test1()</span><br><span class="line">// 函数2：无参，有返回值</span><br><span class="line">def test2():String=&#123;</span><br><span class="line">return &quot;无参，有返回值&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(test2())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><blockquote><ul><li>在参数后面使用*，表示可变参数</li><li>如果参数列表中存在多个参数，那么可变参数一般放置在最后</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">object Test01 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">  // 有输入参数：输出 Array</span><br><span class="line">    test(&quot;Hello&quot;,&quot;scala&quot;)</span><br><span class="line">    </span><br><span class="line">    // 无输入参数：输出List()</span><br><span class="line">    test()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def test(s:String*):Unit=(</span><br><span class="line">      println(s)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数缺省值"><a href="#参数缺省值" class="headerlink" title="参数缺省值"></a>参数缺省值</h3><blockquote><p>缺省 &#x3D; default</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    def printAddress(province:String = &quot;广东&quot;,detail:String=&quot;123&quot;):Unit=&#123;</span><br><span class="line">      println(province,detail)</span><br><span class="line">&#125;</span><br><span class="line">    printAddress()</span><br><span class="line">    printAddress(&quot;海南&quot;,&quot;海口市西环西路一号&quot;)</span><br></pre></td></tr></table></figure><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><blockquote><ul><li><p>通常情况下，传入参数与函数定义的参数列表一一对应</p></li><li><p>命名参数允许使用任意顺序传入参数</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def printName(first:String, last:String) = &#123;</span><br><span class="line">println(first + &quot; &quot; + last)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Print &quot;John Smith&quot; </span><br><span class="line">printName(&quot;John&quot;,&quot;Smith&quot;)</span><br><span class="line">printName(first = &quot;John&quot;,last = &quot;Smith&quot;)</span><br><span class="line">printName(last = &quot;Smith&quot;,first = &quot;John&quot;)</span><br></pre></td></tr></table></figure><h3 id="函数作为变量的值"><a href="#函数作为变量的值" class="headerlink" title="函数作为变量的值"></a>函数作为变量的值</h3><blockquote><p>scala的语法规定，将函数赋值给变量时，必须在函数后面加上空格和下划线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def sayHello(name: String) = println(&quot;hello,&quot; + name)</span><br><span class="line">var greeting = sayHello _</span><br><span class="line">greeting(&quot;特朗普&quot;)</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><ul><li>高阶函数可以将其他函数作为参数或者使用函数作为输出结果 </li><li>所谓高阶函数即输入参数是函数或返回是函数，也可以两者都具备</li></ul></blockquote><h4 id="函数可以作为值进行传递"><a href="#函数可以作为值进行传递" class="headerlink" title="函数可以作为值进行传递"></a>函数可以作为值进行传递</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 函数作为值传递</span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">//调用foo函数，把返回值给变量f</span><br><span class="line">val f = foo //调用foo函数，返回1</span><br><span class="line">println(f) //打印 1</span><br><span class="line">&#125;</span><br><span class="line">def foo(): Int = &#123;</span><br><span class="line">println(&quot;foo...&quot;)</span><br><span class="line">1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//_ 将函数赋值给变量</span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">//在foo后面加上 _，相当于把foo当成一个整体，传递给f1</span><br><span class="line">val f1 = foo _</span><br><span class="line">foo() //foo... </span><br><span class="line">f1() //foo... </span><br><span class="line">&#125;</span><br><span class="line">def foo(): Int = &#123;</span><br><span class="line">println(&quot;foo...&quot;)</span><br><span class="line">1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">//如果明确变量类型，那么不使用下划线也可以将函数作为整体传递给变量</span><br><span class="line">var f2: () =&gt; Int = foo //f2为函数类型，无参，返回值为int类型。</span><br><span class="line">    val v1 = f2() //foo.. </span><br><span class="line">    println(v1) //1</span><br><span class="line">    println(f2.getClass) //class Test12$$anonfun$1</span><br><span class="line">&#125;</span><br><span class="line">def foo(): Int = &#123;</span><br><span class="line">    println(&quot;foo...&quot;)</span><br><span class="line">    1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数可以作为参数进行传递"><a href="#函数可以作为参数进行传递" class="headerlink" title="函数可以作为参数进行传递"></a>函数可以作为参数进行传递</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">// 定义一个函数，函数参数是函数签名.</span><br><span class="line">// f表示函数名称;(Int,Int)表示输入两个Int参数；Int表示函数返回值</span><br><span class="line">def f1(f: (Int, Int) =&gt; Int): Int = &#123;</span><br><span class="line">f(2, 4)</span><br><span class="line">&#125;</span><br><span class="line">//定义一个函数，参数和返回值类型和f1的输入参数一致</span><br><span class="line">def add(a: Int, b: Int): Int = a + b</span><br><span class="line">//将add函数作为参数传递给f1函数，因能够推断出来不是调用，_可以省略</span><br><span class="line">println(f1(add))</span><br><span class="line">println(f1(add _))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数可以作为函数返回值"><a href="#函数可以作为函数返回值" class="headerlink" title="函数可以作为函数返回值"></a>函数可以作为函数返回值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">def f1() = &#123;</span><br><span class="line">def f2() = &#123;</span><br><span class="line">println(&quot;hi,小马&quot;)</span><br><span class="line">&#125;</span><br><span class="line">f2 _ //f1返回值为函数类型</span><br><span class="line">&#125;</span><br><span class="line">//调用f1，得到的是函数类型的值</span><br><span class="line">val f = f1()</span><br><span class="line">//f为函数类型，可以执行返回的函数</span><br><span class="line">f()</span><br><span class="line">// 上面的代码可以简化为</span><br><span class="line">f1()()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置高阶函数"><a href="#内置高阶函数" class="headerlink" title="内置高阶函数"></a>内置高阶函数</h2><p>Scala内置的常用高阶函数包括</p><p>map : map将某个函数应用到集合中的每个元素，结果产生一个新的集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val datas = List(&quot;a,b,c&quot;,&quot;d,e,f,g&quot;,&quot;h,i,j,k&quot;,&quot;l,m,n&quot;)</span><br><span class="line">datas: List[String] = List(a,b,c, d,e,f,g, h,i,j,k, l,m,n)</span><br><span class="line"></span><br><span class="line">scala&gt; datas.map(e =&gt; e.split(&quot; &quot;))</span><br><span class="line">res0: List[Array[String]] = List(Array(a,b,c), Array(d,e,f,g), Array(h,i,j,k), Array(l,m,n))</span><br></pre></td></tr></table></figure><p>flapMap : </p><ul><li>flatMap是map的一种扩展</li><li>函数对每个输入都会返回一个集合</li><li>flatMap把生成的多个集合“拍扁”成为一个集合</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val datas = List(&quot;a,b,c&quot;,&quot;d,e,f,g&quot;,&quot;h,i,j,k&quot;,&quot;l,m,n&quot;)</span><br><span class="line">datas: List[String] = List(a,b,c, d,e,f,g, h,i,j,k, l,m,n)</span><br><span class="line"></span><br><span class="line">scala&gt; datas.flatMap(e =&gt; e.split(&quot;,&quot;))</span><br><span class="line">res0: List[String] = List(a, b, c, d, e, f, g, h, i, j, k, l, m, n)</span><br></pre></td></tr></table></figure><p>foreach</p><ul><li>foreach函数与map函数相似，都是作用到集合的每个元素</li><li>不同点：foreach函数没有返回值，map函数有返回值</li><li>案例：对List集合的每个元素进行输出操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val names = List(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</span><br><span class="line">names: List[String] = List(a, b, c)</span><br><span class="line"></span><br><span class="line">names.foreach&#123;name =&gt; println(s&quot;姓名是:$name&quot;)&#125;</span><br><span class="line">姓名是:a</span><br><span class="line">姓名是:b</span><br><span class="line">姓名是:c</span><br></pre></td></tr></table></figure><p>filter</p><ul><li>filter函数过滤掉使函数返回false的元素</li><li>会作用到集合的每个元素，有返回值</li><li>案例：筛选List集合中的偶数，组成新的List集合</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; def isEven(i:Int):Boolean = i%2 == 0</span><br><span class="line">isEven: (i: Int)Boolean</span><br><span class="line"></span><br><span class="line">scala&gt; val numbers = List(1,2,3,4,5,6,7)</span><br><span class="line">numbers: List[Int] = List(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line"></span><br><span class="line">scala&gt; val newNumbers = numbers.filter(isEven(_))</span><br><span class="line">newNumbers: List[Int] = List(2, 4, 6)</span><br></pre></td></tr></table></figure><p>fold</p><ul><li><p>fold函数折叠(fold)操作， 从一个初始的“种子”值开始，并以该值作为上下文， 处理集合中的每个元素</p></li><li><p>参数:</p><p>（1）初始值 ： 需要一个初始值。按照需要设定</p><p>（2）一个函数：用于计算的函数，这里是累计</p></li><li><p>案例：对初始值0、List集合进行累加求值操作(结果为25)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val numbers = List(5,4,8,6,2)</span><br><span class="line">numbers: List[Int] = List(5, 4, 8, 6, 2)</span><br><span class="line"></span><br><span class="line">scala&gt; numbers.fold(0)&#123;(i,j)=&gt;println(s&quot;i:$i,j:$j&quot;);i+j&#125;</span><br><span class="line">i:0,j:5</span><br><span class="line">i:5,j:4</span><br><span class="line">i:9,j:8</span><br><span class="line">i:17,j:6</span><br><span class="line">i:23,j:2</span><br><span class="line">res5: Int = 25</span><br></pre></td></tr></table></figure><p>foldLeft</p><ul><li><p>foldLeft函数是fold函数的变体；是从左开始，然后向右进行计算</p></li><li><p>参数：</p><p> 初始值</p><p>一个函数：需要两个参数（累加值和当前item）</p></li><li><p>案例：对初始值5、List集合进行累减求值操作(结果为-20)</p></li></ul><p>foldRight</p><ul><li>foldRight函数是fold函数的变体；是从右开始，然后向左进行计算</li><li>参数： • 初始值 • 一个函数：需要两个参数（累加值和当前item）</li><li>案例：对初始值5、List集合进行累减求值操作(结果为0)</li></ul><p>reduce</p><ul><li><p>reduce函数对集合中的元素进行归约</p></li><li><p>处理方式和fold类似。但reduce不需要初始参数，使用第1个数作为开始参数。而fold需要一个 初始输入参数。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(1 to 9).reduceLeft(_ - _)</span><br><span class="line">res0: Int = -43</span><br><span class="line"></span><br><span class="line">(1 to 9).reduce(_ - _)</span><br><span class="line">res1: Int = -43</span><br><span class="line"></span><br><span class="line">(1 to 9).reduce(_ - _)</span><br><span class="line">res2: Int = 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val data = List(1,2,3,4,5)</span><br><span class="line">    val result = data.reduce((i,j) =&gt; &#123;</span><br><span class="line">      println(&quot;i=&quot;+i,&quot;j=&quot;+j);</span><br><span class="line">      i+j</span><br><span class="line">    &#125;)</span><br><span class="line">    println(&quot;求和结果:&quot;+result)</span><br><span class="line">    </span><br><span class="line">(i=1,j=2)</span><br><span class="line">(i=3,j=3)</span><br><span class="line">(i=6,j=4)</span><br><span class="line">(i=10,j=5)</span><br><span class="line">求和结果:15</span><br></pre></td></tr></table></figure><p>zip</p><ul><li><p>zip函数将两个集合结合都一起，是对偶函数</p></li><li><p>案例：将两个集合结合在一起，元素类型是元组</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   // zip示例</span><br><span class="line">   val data1 = Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</span><br><span class="line">   val data2 = Array(1,2,3)</span><br><span class="line">   val data3 = data1.zip(data2)</span><br><span class="line">   for(i &lt;- data3.indices)&#123;</span><br><span class="line">     println(data3(i))</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">// 遍历zip后的结果</span><br><span class="line">   (a,1)</span><br><span class="line">   (b,2)</span><br><span class="line">   (c,3)</span><br></pre></td></tr></table></figure><p>flatten</p><ul><li>flatten函数将结构元素展开</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val datas = List(List(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;),List(1,2,3),List(true,false))</span><br><span class="line">datas: List[List[Any]] = List(List(a, b, c), List(1, 2, 3), List(true, false))</span><br><span class="line"></span><br><span class="line">scala&gt; datas.flatten</span><br><span class="line">res3: List[Any] = List(a, b, c, 1, 2, 3, true, false)</span><br><span class="line"></span><br><span class="line">scala&gt; println(datas.flatten.mkString(&quot;,&quot;))</span><br><span class="line">res4: a,b,c,1,2,3,true,false</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><blockquote><p>没有名字的函数就是匿名函数。</p><p>(x:Int) &#x3D;&gt; { 函数体 }</p><p>x ：表示输入参数类型； Int ：表示输入参数类型；函数体：表示具体代码逻辑</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 传递的函数有一个参数</span><br><span class="line">object testDemo111 extends App &#123;</span><br><span class="line"> </span><br><span class="line">  // （1）定义一个函数：参数包含数据和逻辑函数</span><br><span class="line">  def operation(arr: Array[Int], op: Int =&gt; Int) = &#123;</span><br><span class="line">    for (elem &lt;- arr) yield op(elem)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // （2）定义逻辑函数</span><br><span class="line">  def op(ele: Int): Int = &#123;</span><br><span class="line">    ele + 1</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // （3）标准函数调用</span><br><span class="line">  val arr = operation(Array(1, 2, 3, 4), op)</span><br><span class="line">  println(arr.mkString(&quot;,&quot;))</span><br><span class="line">  </span><br><span class="line">  // （4）采用匿名函数</span><br><span class="line">  val arr1 = operation(Array(1, 2, 3, 4), (ele: Int) =&gt; &#123;</span><br><span class="line">    ele + 1</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // (5) 对匿名函数进行化简</span><br><span class="line">  val arr2 = operation(Array(1, 2, 3, 4), (ele) =&gt; &#123;ele + 1&#125;)</span><br><span class="line">  val arr3 = operation(Array(1, 2, 3, 4), ele =&gt; ele + 1)</span><br><span class="line">  </span><br><span class="line">  // ()如果参数只出现一次，则参数省略且后面参数可以用_代替</span><br><span class="line">  val arr4 = operation(Array(1, 2, 3, 4), _+1)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 传递的函数有两个参数</span><br><span class="line">object testDemo111 extends App &#123;</span><br><span class="line">  def calculator(a: Int, b: Int, op: (Int, Int) =&gt; Int): Int = &#123;</span><br><span class="line">    op(a, b)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // （1）标准版</span><br><span class="line">  println(calculator(2, 3, (x: Int, y: Int) =&gt; &#123;x + y&#125;))</span><br><span class="line">  </span><br><span class="line">  // （2）如果只有一行，则大括号也可以省略</span><br><span class="line">  println(calculator(2, 3, (x: Int, y: Int) =&gt; x + y))</span><br><span class="line">  </span><br><span class="line">  // （3）参数的类型可以省略，会根据形参进行自动的推导;</span><br><span class="line">  println(calculator(2, 3, (x , y) =&gt; x + y))</span><br><span class="line">  </span><br><span class="line">  // （4）如果参数只出现一次，则参数省略且后面参数可以用_代替</span><br><span class="line">  println(calculator(2, 3, _ + _))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数至简原则"><a href="#函数至简原则" class="headerlink" title="函数至简原则"></a>函数至简原则</h2><blockquote><ol><li>return可以省略，Scala会使用函数体的最后一行代码作为返回值</li><li>如果函数体只有一行代码，可以省略花括号</li><li>返回值类型如果能够推断出来，那么返回类型可以省略</li><li>注意：如果有return，则不能省略返回值类型，必须指定</li><li>如果函数明确声明unit，那么即使函数体中使用return关键字也不起作用</li><li>Scala如果期望是无返回值类型，可以省略等号（1）unit类型返回值 2)就 算是有返回值，因为省略&#x3D;号，不会有返回值）</li><li>如果函数无参，但是声明了参数列表，那么调用时，小括号，可加可不加</li><li>如果函数没有参数列表，那么小括号可以省略，调用时小括号必须省略</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 函数标准写法</span><br><span class="line">def f( s : String ): String = &#123;</span><br><span class="line">return s + &quot; 阿联&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(f(&quot;Hello&quot;))</span><br><span class="line"></span><br><span class="line">// 1. ,Scala会使用函数体的最后一行代码作为返回值</span><br><span class="line">def f1( s : String ): String = &#123;</span><br><span class="line">s + &quot; 阿联&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(f1(&quot;Hello&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 2. 如果函数体只有一行代码，可以省略花括号</span><br><span class="line">def f2(s:String):String = s + &quot; 阿联&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 3. 返回值类型如果能够推断出来，那么可以省略, :和返回值类型一起省略</span><br><span class="line">def f3( s : String ) = s + &quot; 阿联&quot; </span><br><span class="line">println(f3(&quot;Hello3&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 4. 如果有return，则不能省略返回值类型，必须指定。</span><br><span class="line">def f4():String = &#123;</span><br><span class="line">return &quot;yaoming&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(f4())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 5. 如果函数明确声明unit，那么即使函数体中使用return关键字也不起作用</span><br><span class="line">def f5(): Unit = &#123;</span><br><span class="line">return &quot;xingxing5&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(f5())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 6. Scala如果期望是无返回值类型,可以省略等号</span><br><span class="line">def f6() &#123;&quot;xingxing6&quot;&#125;</span><br><span class="line">println(f6())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 7. 如函数无参，但声明有参数列表的括号，调用时，小括号可加可不加</span><br><span class="line">def f7() = &quot;xingxing7&quot; println(f7())</span><br><span class="line">println(f7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 8. 如果函数没有参数列表，那么小括号可以省略,调用时小括号必须省略</span><br><span class="line">def f8 = &quot;xingxing8&quot;</span><br><span class="line">//println(f8())</span><br><span class="line">println(f8)</span><br></pre></td></tr></table></figure><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]) &#123;</span><br><span class="line">val str1:String = &quot;Hello, &quot; val str2:String = &quot;Scala!&quot; println( &quot;str1 + str2 = &quot; + strcat1(str1)(str2) )</span><br><span class="line">println( &quot;str1 + str2 = &quot; + strcat2(str1,str2) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//柯里化 -- 实现方式1</span><br><span class="line">def strcat1(s1: String)(s2: String) = &#123;</span><br><span class="line">s1 + s2</span><br><span class="line">&#125;</span><br><span class="line">def strcat2(s1: String, s2: String) = &#123;</span><br><span class="line">s1 + s2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def main(args: Array[String]) &#123;</span><br><span class="line">val str1:String = &quot;Hello, &quot; val str2:String = &quot;Scala!&quot; println( &quot;str1 + str2 = &quot; + strcat1(str1,str2) )</span><br><span class="line">println( &quot;str1 + str2 = &quot; + strcat2(str1)(str2) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//柯里化 -- 实现方式2</span><br><span class="line">def strcat2(s1: String) = &#123;</span><br><span class="line">def f1(s2:String)=&#123;</span><br><span class="line">s1+s2</span><br><span class="line">&#125;</span><br><span class="line">f1 _</span><br><span class="line">&#125;</span><br><span class="line">def strcat1(s1: String, s2: String) = &#123;</span><br><span class="line">s1 + s2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><blockquote><p>惰性函数概述</p><ul><li>当函数返回值被声明为lazy时，函数的执行将被推迟，直到我们首次对 此取值，该函数才会执行。这种函数我们称之为惰性函数</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">lazy val res = sum(10, 30)</span><br><span class="line">println(&quot;----------------&quot;)</span><br><span class="line">println(&quot;res=&quot; + res)</span><br><span class="line">&#125;</span><br><span class="line">def sum(n1: Int, n2: Int): Int = &#123;</span><br><span class="line">println(&quot;sum被执行。。。&quot;)</span><br><span class="line">return n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传名参数和传值参数"><a href="#传名参数和传值参数" class="headerlink" title="传名参数和传值参数"></a>传名参数和传值参数</h2><h3 id="传值调用：把计算后的值传递过去"><a href="#传值调用：把计算后的值传递过去" class="headerlink" title="传值调用：把计算后的值传递过去"></a>传值调用：把计算后的值传递过去</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">def f = ()=&gt;&#123;</span><br><span class="line">println(&quot;f...&quot;)</span><br><span class="line">10</span><br><span class="line">&#125;</span><br><span class="line">foo(f()) //先执行f() ，将结果10传给foo</span><br><span class="line">&#125;</span><br><span class="line">def foo(a: Int):Unit = &#123;</span><br><span class="line">println(a)</span><br><span class="line">println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传名调用：把代码传递过去"><a href="#传名调用：把代码传递过去" class="headerlink" title="传名调用：把代码传递过去"></a>传名调用：把代码传递过去</h3><blockquote><p>传名参数在函数调用前表达式不会被求值，而被包裹成一个匿名函数作为函数参数传递， 方法在变量名和变量类型使用 &#x3D;&gt; 符号（如：a: &#x3D;&gt; Int）来设置传名调</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">def f = ()=&gt;&#123;</span><br><span class="line">println(&quot;f...&quot;)</span><br><span class="line">10</span><br><span class="line">&#125;</span><br><span class="line">foo(f())</span><br><span class="line">&#125;</span><br><span class="line">//def foo(a:() =&gt;Int):Unit = &#123; //也是传值调用，参数为函数类型</span><br><span class="line">def foo(a: =&gt;Int):Unit = &#123; //注意这里的写法</span><br><span class="line">a //这里把a作为函数的内部代码来执行</span><br><span class="line">println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scala数组"><a href="#Scala数组" class="headerlink" title="Scala数组"></a>Scala数组</h1><blockquote><p>Scala 语言中提供的数组是用来存储固定大小的同类型元素，数组对于每一门编程语言来说都是重要的数据结构之一。</p><p>声明数组变量并不是声明 number0、number1、…、number99 一个个单独的变量，而是声明一个就像 numbers 这样的变量，然后使用 numbers[0]、numbers[1]、…、numbers[99] 来表示一个个单独的变量。数组中某个指定的元素是通过索引来访问的。</p><p>数组的第一个元素索引为0，最后一个元素的索引为元素总数减1。</p></blockquote><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> Scala 一维数组声明的语法格式</span><br><span class="line"> </span><br><span class="line"> var z:Array[String] = new Array[String](3)</span><br><span class="line">或</span><br><span class="line">var z = new Array[String](3)</span><br><span class="line"></span><br><span class="line">var z = Array(123, 456, 789)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 访问对应索引值</span><br><span class="line">println(z(0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 输出所有元素</span><br><span class="line">for(x &lt;- z)println(x+&quot; &quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 计算所有元素的总和</span><br><span class="line">var total:Int = 0</span><br><span class="line">for(y &lt;- z)&#123;</span><br><span class="line">total += y</span><br><span class="line">&#125;</span><br><span class="line">println(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 查找数组中的最大元素</span><br><span class="line">var max = z(0);</span><br><span class="line">for (i &lt;- 1 to (z.length - 1)) &#123;</span><br><span class="line">if (z(i) &gt; max) max = z(i);</span><br><span class="line">&#125;</span><br><span class="line">println(&quot;最大值为 &quot; + max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建数组区间</span><br><span class="line">var myList = range(10,20,2)  // 区间范围值10到20,步长为2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 数组合并</span><br><span class="line">var mylist1 = Array(1,3,5,7,9)</span><br><span class="line">var mylist2 = Array(2,4,6,8,10)</span><br><span class="line"></span><br><span class="line">var mylist3 = concat(mylist1,mylist2)</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 二维数组声明语法</span><br><span class="line">var myMatrix = Array.ofDim[Int](3,3)</span><br><span class="line">val myMatrix: Array[Array[Int]] = Array.ofDim[Int](3, 3)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建矩阵</span><br><span class="line">for(i&lt;- 0 to 2)&#123;</span><br><span class="line">  for(j&lt;- 0 to 2)(</span><br><span class="line">    myMatrix(i)(j) = j</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印二维阵列</span><br><span class="line">for (i&lt;- 0 to 2)&#123;</span><br><span class="line">  for(j&lt;-0 to 2)&#123;</span><br><span class="line">    print(&quot; &quot;+myMatrix(i)(j))</span><br><span class="line">  &#125;</span><br><span class="line">  println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><p>下表中为 Scala 语言中处理数组的重要方法，使用它前我们需要使用 <strong>import Array._</strong> 引入包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1. def apply( x: T, xs: T* ): Array[T]</span><br><span class="line">创建指定对象 T 的数组, T 的值可以是 Unit, Double, Float, Long, Int, Char, Short, Byte, Boolean</span><br><span class="line"></span><br><span class="line">2. def concat[T]( xss: Array[T]* ): Array[T]</span><br><span class="line">合并数组</span><br><span class="line"></span><br><span class="line">3. def copy( src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int ): Unit</span><br><span class="line">复制一个数组到另一个数组上。相等于 Java&#x27;s System.arraycopy(src, srcPos, dest, destPos, length)。</span><br><span class="line"></span><br><span class="line">4. def empty[T]: Array[T]</span><br><span class="line">返回长度为 0 的数组</span><br><span class="line"></span><br><span class="line">5. def iterate[T]( start: T, len: Int )( f: (T) =&gt; T ): Array[T]</span><br><span class="line">返回指定长度数组，每个数组元素为指定函数的返回值。</span><br><span class="line">以上实例数组初始值为 0，长度为 3，计算函数为a=&gt;a+1：</span><br><span class="line"></span><br><span class="line">6. def fill[T]( n: Int )(elem: =&gt; T): Array[T]</span><br><span class="line">返回数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充</span><br><span class="line"></span><br><span class="line">7. def fill[T]( n1: Int, n2: Int )( elem: =&gt; T ): Array[Array[T]]</span><br><span class="line">返回二数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充</span><br><span class="line"></span><br><span class="line">8. def ofDim[T]( n1: Int ): Array[T]</span><br><span class="line">创建指定长度的数组</span><br><span class="line"></span><br><span class="line">9. def ofDim[T]( n1: Int, n2: Int ): Array[Array[T]]</span><br><span class="line">创建二维数组</span><br><span class="line"></span><br><span class="line">10. def ofDim[T]( n1: Int, n2: Int, n3: Int ): Array[Array[Array[T]]]</span><br><span class="line">创建三维数组</span><br><span class="line"></span><br><span class="line">11. def range( start: Int, end: Int, step: Int ): Array[Int]</span><br><span class="line">创建指定区间内的数组，step 为每个元素间的步长</span><br><span class="line"></span><br><span class="line">12. def range( start: Int, end: Int ): Array[Int]</span><br><span class="line">创建指定区间内的数组</span><br><span class="line"></span><br><span class="line">13.def tabulate[T]( n: Int )(f: (Int)=&gt; T): Array[T]</span><br><span class="line">返回指定长度数组，每个数组元素为指定函数的返回值，默认从 0 开始。</span><br><span class="line">以上实例返回 3 个元素：</span><br><span class="line"></span><br><span class="line">14. def tabulate[T]( n1: Int, n2: Int )( f: (Int, Int ) =&gt; T): Array[Array[T]]</span><br><span class="line">返回指定长度的二维数组，每个数组元素为指定函数的返回值，默认从 0 开始。</span><br></pre></td></tr></table></figure><h1 id="Scala-访问修饰符"><a href="#Scala-访问修饰符" class="headerlink" title="Scala 访问修饰符"></a>Scala 访问修饰符</h1><blockquote><p>Scala 访问修饰符基本和Java的一样，分别有：private，protected，public。</p><p>如果没有指定访问修饰符，默认情况下，Scala 对象的访问级别都是 public。</p><p>Scala 中的 private 限定符，比 Java 更严格，在嵌套类情况下，外层类甚至不能访问被嵌套类的私有成员</p></blockquote><h2 id="私有-Private-成员"><a href="#私有-Private-成员" class="headerlink" title="私有(Private)成员"></a>私有(Private)成员</h2><blockquote><p>用 private 关键字修饰，带有此标记的成员仅在包含了成员定义的类或对象内部可见，同样的规则还适用内部类。</p></blockquote><h2 id="保护-Protected-成员"><a href="#保护-Protected-成员" class="headerlink" title="保护(Protected)成员"></a>保护(Protected)成员</h2><blockquote><p>在 scala 中，对保护（Protected）成员的访问比 java 更严格一些。因为它只允许保护成员在定义了该成员的的类的子类中被访问。而在java中，用 protected关键字修饰的成员，除了定义了该成员的类的子类可以访问，同一个包里的其他类也可以进行访问。</p></blockquote><h2 id="公共-Public-成员"><a href="#公共-Public-成员" class="headerlink" title="公共(Public)成员"></a>公共(Public)成员</h2><blockquote><p>Scala 中，如果没有指定任何的修饰符，则默认为 public。这样的成员在任何地方都可以被访问</p></blockquote><h2 id="作用域保护"><a href="#作用域保护" class="headerlink" title="作用域保护"></a>作用域保护</h2><blockquote><p>Scala中，访问修饰符可以通过使用限定词强调。格式为:</p></blockquote><h1 id="Scala文件IO"><a href="#Scala文件IO" class="headerlink" title="Scala文件IO"></a>Scala文件IO</h1><h1 id="Scala提取器"><a href="#Scala提取器" class="headerlink" title="Scala提取器"></a>Scala提取器</h1><h1 id="Scala异常处理"><a href="#Scala异常处理" class="headerlink" title="Scala异常处理"></a>Scala异常处理</h1><h1 id="Scala正则表达式"><a href="#Scala正则表达式" class="headerlink" title="Scala正则表达式"></a>Scala正则表达式</h1><h1 id="Scala模式匹配"><a href="#Scala模式匹配" class="headerlink" title="Scala模式匹配"></a>Scala模式匹配</h1>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
